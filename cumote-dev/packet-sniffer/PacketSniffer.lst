
AVRASM ver. 2.1.9  PacketSniffer.asm Tue Mar 25 22:06:01 2008

PacketSniffer.asm(991): Including file 'PacketSniffer.vec'
PacketSniffer.asm(992): Including file 'PacketSniffer.inc'
PacketSniffer.inc(2): warning: Register r4 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(3): warning: Register r6 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(4): warning: Register r9 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(5): warning: Register r8 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(6): warning: Register r11 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(7): warning: Register r12 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(8): warning: Register r10 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
PacketSniffer.inc(9): warning: Register r13 already defined by the .DEF directive
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.9 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega644
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 256 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : Off
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega644
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR0=0x2D
                 	.EQU SPDR0=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "PacketSniffer.vec"
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 015f 	JMP  _handle_IRQ
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0354 	JMP  _handle_tim1
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 02f1 	JMP  _handle_rxc
00002a 940c 0000 	JMP  0x00
00002c 940c 033c 	JMP  _handle_txc
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
                 
                 	.INCLUDE "PacketSniffer.inc"
                 
                 	.DEF _HAL_tx_frame=R4
                 	.DEF _HAL_rx_frame=R6
                 	.DEF _HAL_tx_frame_length=R9
                 	.DEF _HAL_rx_frame_length=R8
                 	.DEF _HAL_radio_state=R11
                 	.DEF _COM_mcu_freq=R12
                 	.DEF _m644_baud_divisor=R10
                 	.DEF _busy_flag=R13
                 _195:
000038 ffff
000039 ddff      	.DB  0xFF,0xFF,0xFF,0xDD
                 _196:
00003a 051a      	.DW  _ack
                 _197:
00003b ffff
00003c ffff
PacketSniffer.inc(15): warning: .cseg .db misalignment - padding zero byte
PacketSniffer.asm(992): 'PacketSniffer.inc' included form here
00003d 0000      	.DB  0xFF,0xFF,0xFF,0xFF,0x0
                 _198:
00003e 0520      	.DW  _preamble
                 _199:
00003f ffff
000040 aaff      	.DB  0xFF,0xFF,0xFF,0xAA
                 _200:
000041 0527      	.DW  _ed_preamble
                 _277:
000042 0000      	.DW  0x00
                 
                 ;GPIOR0 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000043 0000
000044 0000      	.DW  0,0
                 
                 __GLOBAL_INI_TBL:
000045 0004      	.DW  0x04
000046 1000      	.DW  0x1000
000047 0086      	.DW  __HEAP_START_MARKER*2
                 
000048 0004      	.DW  0x04
000049 051a      	.DW  _ack
00004a 0070      	.DW  _195*2
                 
00004b 0002      	.DW  0x02
00004c 051e      	.DW  _g_ack_head
00004d 0074      	.DW  _196*2
                 
00004e 0005      	.DW  0x05
00004f 0520      	.DW  _preamble
000050 0076      	.DW  _197*2
                 
000051 0002      	.DW  0x02
000052 0525      	.DW  _g_preamble_head
000053 007c      	.DW  _198*2
                 
000054 0004      	.DW  0x04
000055 0527      	.DW  _ed_preamble
000056 007e      	.DW  _199*2
                 
000057 0002      	.DW  0x02
000058 052b      	.DW  _g_ed_preamble_head
000059 0082      	.DW  _200*2
                 
00005a 0002      	.DW  0x02
00005b 052d      	.DW  _p_S65
00005c 0084      	.DW  _277*2
                 
00005d 0000      	.DW  0
                 _0x124:
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bff5      	OUT  MCUCR,R31
000063 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000064 e1f8      	LDI  R31,0x18
000065 95a8      	WDR
000066 b7a4      	IN   R26,MCUSR
000067 7fa7      	CBR  R26,8
000068 bfa4      	OUT  MCUSR,R26
000069 93f0 0060 	STS  WDTCSR,R31
00006b 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00006d e08d      	LDI  R24,13
00006e e0a2      	LDI  R26,2
00006f 27bb      	CLR  R27
                 __CLEAR_REG:
000070 93ed      	ST   X+,R30
000071 958a      	DEC  R24
000072 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000073 e080      	LDI  R24,LOW(0xF00)
000074 e09f      	LDI  R25,HIGH(0xF00)
000075 e0a0      	LDI  R26,LOW(0x100)
000076 e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
000077 93ed      	ST   X+,R30
000078 9701      	SBIW R24,1
000079 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007a e8ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007c 9185      	LPM  R24,Z+
00007d 9195      	LPM  R25,Z+
00007e 9700      	SBIW R24,0
00007f f061      	BREQ __GLOBAL_INI_END
000080 91a5      	LPM  R26,Z+
000081 91b5      	LPM  R27,Z+
000082 9005      	LPM  R0,Z+
000083 9015      	LPM  R1,Z+
000084 01bf      	MOVW R22,R30
000085 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000086 9005      	LPM  R0,Z+
000087 920d      	ST   X+,R0
000088 9701      	SBIW R24,1
000089 f7e1      	BRNE __GLOBAL_INI_LOOP
00008a 01fb      	MOVW R30,R22
00008b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
00008c e0e0      	LDI  R30,__GPIOR0_INIT
00008d bbee      	OUT  GPIOR0,R30
                 
                 ;STACK POINTER INITIALIZATION
00008e efef      	LDI  R30,LOW(0xFFF)
00008f bfed      	OUT  SPL,R30
000090 e0ef      	LDI  R30,HIGH(0xFFF)
000091 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000092 e0c0      	LDI  R28,LOW(0x500)
000093 e0d5      	LDI  R29,HIGH(0x500)
                 
000094 940c 0371 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 ;       1 #include <mega644.h>
                 ;       2 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;       3 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;       4 	.EQU __se_bit=0x01
                 	.EQU __se_bit=0x01
                 ;       5 	.EQU __sm_mask=0x0E
                 	.EQU __sm_mask=0x0E
                 ;       6 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powerdown=0x04
                 ;       7 	.EQU __sm_powersave=0x06
                 	.EQU __sm_powersave=0x06
                 ;       8 	.EQU __sm_standby=0x0C
                 	.EQU __sm_standby=0x0C
                 ;       9 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_ext_standby=0x0E
                 ;      10 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_adc_noise_red=0x02
                 ;      11 	.SET power_ctrl_reg=smcr
                 	.SET power_ctrl_reg=smcr
                 ;      12 	#endif
                 	#endif
                 ;      13 #include "cumote_hal.h"
                 _HAL_LQI:
000500           	.BYTE 0x1
                 _HAL_radio_channel:
000501           	.BYTE 0x1
                 _HAL_transmit_power:
000502           	.BYTE 0x1
                 _HAL_CRC_enabled:
000503           	.BYTE 0x1
                 
                 	.CSEG
                 _var_delay:
                 ;	t -> Y+0
                 ;      14         MOV R16,R12
000096 2d0c              MOV R16,R12
                 ;      15         ld R26,y  ; load t into r26. y register is stack pointer. t is lowest on stack.
000097 81a8              ld R26,y  ; load t into r26. y register is stack pointer. t is lowest on stack.
                 ;      16         clr R27   ; promote t to unsigned int
000098 27bb              clr R27   ; promote t to unsigned int
                 ;      17 
                         
                 ;      18         cpi R16,0 ; see if r12 is 0
000099 3000              cpi R16,0 ; see if r12 is 0
                 ;      19         breq startdelay   ; branch to starting delay...       overhead is now a bit more than 5 cycles.
00009a f029              breq startdelay   ; branch to starting delay...       overhead is now a bit more than 5 cycles.
                 ;      20    preploop:         ;~5 more cycles
                    preploop:         ;~5 more cycles
                 ;      21         lsl R26  ; multiply t by 2
00009b 0faa              lsl R26  ; multiply t by 2
                 ;      22         rol R27
00009c 1fbb              rol R27
                 ;      23         dec R16
00009d 950a              dec R16   
                 ;      24         cpi R16,0
00009e 3000              cpi R16,0
                 ;      25         brne preploop
00009f f7d9              brne preploop
                 ;      26    startdelay:                      ;overhead: t=0...5. t=1...10. t=2...15. t=3...20. t=4...25.
                    startdelay:                      ;overhead: t=0...5. t=1...10. t=2...15. t=3...20. t=4...25.
                 ;      27         subi R26,3     ; lo byte
0000a0 50a3              subi R26,3     ; lo byte
                 ;      28         sbci R27,0     ; hi byte, with carry
0000a1 40b0              sbci R27,0     ; hi byte, with carry
                 ;      29         brmi enddelay      ; if result is negative, end loop, done with delay.
0000a2 f002              brmi enddelay      ; if result is negative, end loop, done with delay.
                 ;      30    enddelay:
                    enddelay:        
0000a3 9621      	ADIW R28,1
0000a4 9508      	RET
                 
                 	.DSEG
                 _COM_spi_freq:
000504           	.BYTE 0x1
                 _COM_IRQ_pending:
000505           	.BYTE 0x1
                 _COM_IRQ_status:
000506           	.BYTE 0x1
                 
                 	.CSEG
                 _COM_init:
0000a5 9a25      	SBI  0x4,5
0000a6 9826      	CBI  0x4,6
0000a7 9a27      	SBI  0x4,7
0000a8 9822      	CBI  0x4,2
0000a9 9a23      	SBI  0x4,3
0000aa 9a24      	SBI  0x4,4
0000ab 982b      	CBI  0x5,3
0000ac 9a2c      	SBI  0x5,4
0000ad 24cc      	CLR  R12
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93e0 0506 	STS  _COM_IRQ_status,R30
0000b1 d001      	RCALL _COM_reset_SPI_clock
0000b2 9508      	RET
                 _COM_reset_SPI_clock:
0000b3 e5e0      	LDI  R30,LOW(80)
0000b4 bdec      	OUT  0x2C,R30
0000b5 e0e1      	LDI  R30,LOW(1)
0000b6 bded      	OUT  0x2D,R30
0000b7 93e0 0504 	STS  _COM_spi_freq,R30
0000b9 9508      	RET
                 _COM_set_MCU_clock:
0000ba 931a      	ST   -Y,R17
                 ;	clk -> Y+1
                 ;	junk -> R17
0000bb 81a9      	LDD  R26,Y+1
0000bc 30a5      	CPI  R26,LOW(0x5)
0000bd f010      	BRLO _0x13
0000be e0e4      	LDI  R30,LOW(4)
0000bf 83e9      	STD  Y+1,R30
                 _0x13:
0000c0 e0e3      	LDI  R30,LOW(3)
0000c1 940e 0581 	CALL SUBOPT_0x0
0000c3 7f10      	ANDI R17,LOW(240)
0000c4 81e9      	LDD  R30,Y+1
0000c5 70e7      	ANDI R30,LOW(0x7)
0000c6 2b1e      	OR   R17,R30
0000c7 e0e3      	LDI  R30,LOW(3)
0000c8 93ea      	ST   -Y,R30
0000c9 931a      	ST   -Y,R17
0000ca d002      	RCALL _COM_write_register
0000cb 8118      	LDD  R17,Y+0
0000cc c1cc      	RJMP _0x11F
                 ;	speed -> Y+0
                 _COM_write_register:
0000cd 931a      	ST   -Y,R17
                 ;	address -> Y+2
                 ;	data -> Y+1
                 ;	junk -> R17
0000ce 982c      	CBI  0x5,4
0000cf 81ea      	LDD  R30,Y+2
0000d0 73ef      	ANDI R30,LOW(0x3F)
0000d1 54e0      	SUBI R30,-LOW(192)
0000d2 bdee      	OUT  0x2E,R30
                 _0x22:
0000d3 b5ed      	IN   R30,0x2D
0000d4 ffe7      	SBRS R30,7
0000d5 cffd      	RJMP _0x22
0000d6 b51e      	IN   R17,46
0000d7 81e9      	LDD  R30,Y+1
0000d8 bdee      	OUT  0x2E,R30
                 _0x25:
0000d9 b5ed      	IN   R30,0x2D
0000da ffe7      	SBRS R30,7
0000db cffd      	RJMP _0x25
0000dc 9a2c      	SBI  0x5,4
0000dd 8118      	LDD  R17,Y+0
0000de c1ff      	RJMP _0x11E
                 _COM_read_register:
0000df 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	junk -> R17
0000e0 982c      	CBI  0x5,4
0000e1 81e9      	LDD  R30,Y+1
0000e2 73ef      	ANDI R30,LOW(0x3F)
0000e3 58e0      	SUBI R30,-LOW(128)
0000e4 bdee      	OUT  0x2E,R30
                 _0x2C:
0000e5 b5ed      	IN   R30,0x2D
0000e6 ffe7      	SBRS R30,7
0000e7 cffd      	RJMP _0x2C
0000e8 b51e      	IN   R17,46
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea bdee      	OUT  0x2E,R30
                 _0x2F:
0000eb b5ed      	IN   R30,0x2D
0000ec ffe7      	SBRS R30,7
0000ed cffd      	RJMP _0x2F
0000ee 9a2c      	SBI  0x5,4
0000ef b5ee      	IN   R30,0x2E
0000f0 8118      	LDD  R17,Y+0
0000f1 c1a7      	RJMP _0x11F
                 ;	i -> R17
                 _COM_upload_frame:
0000f2 9724      	SBIW R28,4
0000f3 940e 05f3 	CALL __SAVELOCR6
                 ;	Twait -> R16,R17
                 ;	Tradio -> R18,R19
                 ;	Tmcu -> R20,R21
                 ;	Tspi -> Y+8
                 ;	L -> Y+7
                 ;	i -> Y+6
0000f5 e2e0      	LDI  R30,LOW(32)
0000f6 93ea      	ST   -Y,R30
0000f7 940e 0096 	CALL _var_delay
0000f9 982c      	CBI  0x5,4
0000fa e2e0      	LDI  R30,LOW(32)
0000fb bdee      	OUT  0x2E,R30
                 _0x48:
0000fc b5ed      	IN   R30,0x2D
0000fd ffe7      	SBRS R30,7
0000fe cffd      	RJMP _0x48
0000ff e0e0      	LDI  R30,LOW(0)
000100 bdee      	OUT  0x2E,R30
                 _0x4B:
000101 b5ed      	IN   R30,0x2D
000102 ffe7      	SBRS R30,7
000103 cffd      	RJMP _0x4B
000104 b5ee      	IN   R30,0x2E
000105 83ef      	STD  Y+7,R30
000106 e0f0      	LDI  R31,0
000107 93fa      	ST   -Y,R31
000108 93ea      	ST   -Y,R30
000109 d098      	RCALL _HAL_set_RX_buff_len
00010a 81ef      	LDD  R30,Y+7
00010b 95e2      	SWAP R30
00010c 7fe0      	ANDI R30,0xF0
00010d 0fee      	LSL  R30
00010e 2f2e      	MOV  R18,R30
00010f 2733      	CLR  R19
000110 81ef      	LDD  R30,Y+7
000111 0fee      	LSL  R30
000112 0fee      	LSL  R30
000113 0fee      	LSL  R30
000114 2fae      	MOV  R26,R30
000115 91e0 0504 	LDS  R30,_COM_spi_freq
000117 940e 05d3 	CALL __LSLB12
000119 2fae      	MOV  R26,R30
00011a 2dec      	MOV  R30,R12
00011b 940e 05e3 	CALL __LSRB12
00011d 2f4e      	MOV  R20,R30
00011e 2755      	CLR  R21
00011f 91e0 0504 	LDS  R30,_COM_spi_freq
000121 e1a0      	LDI  R26,LOW(16)
000122 940e 05d3 	CALL __LSLB12
000124 2fae      	MOV  R26,R30
000125 2dec      	MOV  R30,R12
000126 940e 05db 	CALL __ASRB12
000128 e0f0      	LDI  R31,0
000129 fde7      	SBRC R30,7
00012a efff      	SER  R31
00012b 87e8      	STD  Y+8,R30
00012c 87f9      	STD  Y+8+1,R31
00012d 01d9      	MOVW R26,R18
00012e 1ba4      	SUB  R26,R20
00012f 0bb5      	SBC  R27,R21
000130 1bae      	SUB  R26,R30
000131 0bbf      	SBC  R27,R31
000132 018d      	MOVW R16,R26
000133 930a      	ST   -Y,R16
000134 940e 0096 	CALL _var_delay
000136 e0e0      	LDI  R30,LOW(0)
000137 83ee      	STD  Y+6,R30
                 _0x4F:
000138 81ae      	LDD  R26,Y+6
000139 15a8      	CP   R26,R8
00013a f480      	BRSH _0x50
00013b e0e0      	LDI  R30,LOW(0)
00013c bdee      	OUT  0x2E,R30
                 _0x51:
00013d b5ed      	IN   R30,0x2D
00013e ffe7      	SBRS R30,7
00013f cffd      	RJMP _0x51
000140 81ee      	LDD  R30,Y+6
000141 e0f0      	LDI  R31,0
000142 0de6      	ADD  R30,R6
000143 1df7      	ADC  R31,R7
000144 01df      	MOVW R26,R30
000145 b5ee      	IN   R30,0x2E
000146 93ec      	ST   X,R30
000147 81ee      	LDD  R30,Y+6
000148 5fef      	SUBI R30,-LOW(1)
000149 83ee      	STD  Y+6,R30
00014a cfed      	RJMP _0x4F
                 _0x50:
00014b e0e0      	LDI  R30,LOW(0)
00014c bdee      	OUT  0x2E,R30
                 _0x54:
00014d b5ed      	IN   R30,0x2D
00014e ffe7      	SBRS R30,7
00014f cffd      	RJMP _0x54
000150 b5ee      	IN   R30,0x2E
000151 93e0 0500 	STS  _HAL_LQI,R30
000153 9a2c      	SBI  0x5,4
000154 940e 05fa 	CALL __LOADLOCR6
000156 962a      	ADIW R28,10
000157 9508      	RET
                 _COM_enable_interrupt_IRQ:
000158 91e0 0069 	LDS  R30,105
00015a 63e0      	ORI  R30,LOW(0x30)
00015b 93e0 0069 	STS  105,R30
00015d 9aea      	SBI  0x1D,2
00015e 9508      	RET
                 _handle_IRQ:
00015f 93ea      	ST   -Y,R30
000160 e0e1      	LDI  R30,LOW(1)
000161 93e0 0505 	STS  _COM_IRQ_pending,R30
000163 91e9      	LD   R30,Y+
000164 9518      	RETI
                 _COM_IRQ_handler:
000165 91a0 0505 	LDS  R26,_COM_IRQ_pending
000167 30a1      	CPI  R26,LOW(0x1)
000168 f449      	BRNE _0x59
000169 e0e0      	LDI  R30,LOW(0)
00016a 93e0 0505 	STS  _COM_IRQ_pending,R30
00016c e0ef      	LDI  R30,LOW(15)
00016d 93ea      	ST   -Y,R30
00016e 940e 00df 	CALL _COM_read_register
000170 93e0 0506 	STS  _COM_IRQ_status,R30
                 _0x59:
000172 9508      	RET
                 _HAL_initialization:
000173 2444      	CLR  R4
000174 2455      	CLR  R5
000175 2466      	CLR  R6
000176 2477      	CLR  R7
000177 e0e0      	LDI  R30,LOW(0)
000178 93e0 0503 	STS  _HAL_CRC_enabled,R30
00017a ef8e
00017b e091
00017c 9701
00017d f7f1      	__DELAY_USW 510
00017e d007      	RCALL _HAL_statemachine_reset
00017f d040      	RCALL _HAL_get_radio_channel
000180 93e0 0501 	STS  _HAL_radio_channel,R30
000182 d060      	RCALL _HAL_get_transmit_power
000183 93e0 0502 	STS  _HAL_transmit_power,R30
000185 9508      	RET
                 _HAL_statemachine_reset:
000186 d065      	RCALL _HAL_get_state
000187 e088
000188 958a
000189 f7f1      	__DELAY_USB 8
00018a 20bb      	TST  R11
00018b f459      	BRNE _0x61
00018c e0e2      	LDI  R30,LOW(2)
00018d 93ea      	ST   -Y,R30
00018e e0e8      	LDI  R30,LOW(8)
00018f 93ea      	ST   -Y,R30
000190 940e 00cd 	CALL _COM_write_register
000192 ef8e
000193 e091
000194 9701
000195 f7f1      	__DELAY_USW 510
000196 c009      	RJMP _0x62
                 _0x61:
000197 e0e2      	LDI  R30,LOW(2)
000198 93ea      	ST   -Y,R30
000199 e0e3      	LDI  R30,LOW(3)
00019a 93ea      	ST   -Y,R30
00019b 940e 00cd 	CALL _COM_write_register
00019d e088
00019e 958a
00019f f7f1      	__DELAY_USB 8
                 _0x62:
0001a0 d04b      	RCALL _HAL_get_state
0001a1 9508      	RET
                 ;	length -> Y+0
                 _HAL_set_RX_buff_len:
                 ;	length -> Y+0
0001a2 2c06      	MOV  R0,R6
0001a3 2807      	OR   R0,R7
0001a4 f029      	BREQ _0x67
0001a5 927a      	ST   -Y,R7
0001a6 926a      	ST   -Y,R6
0001a7 940e 054a 	CALL _free
0001a9 2488      	CLR  R8
                 _0x67:
0001aa 81a8      	LD   R26,Y
0001ab 81b9      	LDD  R27,Y+1
0001ac 38a1      	CPI  R26,LOW(0x81)
0001ad e0e0      	LDI  R30,HIGH(0x81)
0001ae 07be      	CPC  R27,R30
0001af f010      	BRLO _0x68
0001b0 e8e0      	LDI  R30,LOW(128)
0001b1 2e8e      	MOV  R8,R30
                 _0x68:
0001b2 81e8      	LD   R30,Y
0001b3 81f9      	LDD  R31,Y+1
0001b4 93fa      	ST   -Y,R31
0001b5 93ea      	ST   -Y,R30
0001b6 940e 052c 	CALL _malloc
0001b8 013f      	MOVW R6,R30
0001b9 2c06      	MOV  R0,R6
0001ba 2807      	OR   R0,R7
0001bb f411      	BRNE _0x69
0001bc 2488      	CLR  R8
0001bd c001      	RJMP _0x6A
                 _0x69:
0001be 8088      	LDD  R8,Y+0
                 _0x6A:
0001bf c0d9      	RJMP _0x11F
                 _HAL_get_radio_channel:
0001c0 931a      	ST   -Y,R17
                 ;	tmp -> R17
0001c1 e0e8      	LDI  R30,LOW(8)
0001c2 940e 0581 	CALL SUBOPT_0x0
0001c4 2fe1      	MOV  R30,R17
0001c5 71ef      	ANDI R30,LOW(0x1F)
0001c6 93e0 0501 	STS  _HAL_radio_channel,R30
0001c8 c168      	RJMP _0x11D
                 _HAL_set_radio_channel:
0001c9 931a      	ST   -Y,R17
                 ;	channel -> Y+1
                 ;	tmp -> R17
0001ca e0e8      	LDI  R30,LOW(8)
0001cb 940e 0581 	CALL SUBOPT_0x0
0001cd 81a9      	LDD  R26,Y+1
0001ce 30ab      	CPI  R26,LOW(0xB)
0001cf f010      	BRLO _0x6C
0001d0 31ab      	CPI  R26,LOW(0x1B)
0001d1 f010      	BRLO _0x6B
                 _0x6C:
0001d2 e0eb      	LDI  R30,LOW(11)
0001d3 83e9      	STD  Y+1,R30
                 _0x6B:
0001d4 2fe1      	MOV  R30,R17
0001d5 7ee0      	ANDI R30,LOW(0xE0)
0001d6 81a9      	LDD  R26,Y+1
0001d7 2bea      	OR   R30,R26
0001d8 2f1e      	MOV  R17,R30
0001d9 e0e8      	LDI  R30,LOW(8)
0001da 93ea      	ST   -Y,R30
0001db 931a      	ST   -Y,R17
0001dc 940e 00cd 	CALL _COM_write_register
0001de 81e9      	LDD  R30,Y+1
0001df 93e0 0501 	STS  _HAL_radio_channel,R30
0001e1 8118      	LDD  R17,Y+0
0001e2 c0b6      	RJMP _0x11F
                 _HAL_get_transmit_power:
0001e3 931a      	ST   -Y,R17
                 ;	tmp -> R17
0001e4 e0e5      	LDI  R30,LOW(5)
0001e5 940e 0581 	CALL SUBOPT_0x0
0001e7 2fe1      	MOV  R30,R17
0001e8 70ef      	ANDI R30,LOW(0xF)
0001e9 93e0 0502 	STS  _HAL_transmit_power,R30
0001eb c145      	RJMP _0x11D
                 ;	tx_pwr -> Y+1
                 ;	tmp -> R17
                 _HAL_get_state:
0001ec e0e1      	LDI  R30,LOW(1)
0001ed 93ea      	ST   -Y,R30
0001ee 940e 00df 	CALL _COM_read_register
0001f0 71ef      	ANDI R30,LOW(0x1F)
0001f1 2ebe      	MOV  R11,R30
0001f2 9508      	RET
                 _HAL_set_state:
0001f3 931a      	ST   -Y,R17
                 ;	state -> Y+1
                 ;	i -> R17
0001f4 e213      	LDI  R17,35
0001f5 940e 01ec 	CALL _HAL_get_state
0001f7 81e9      	LDD  R30,Y+1
0001f8 30e8      	CPI  R30,LOW(0x8)
0001f9 f4e9      	BRNE _0x72
0001fa e0e6      	LDI  R30,LOW(6)
0001fb 15eb      	CP   R30,R11
0001fc f031      	BREQ _0x74
0001fd e0e9      	LDI  R30,LOW(9)
0001fe 15eb      	CP   R30,R11
0001ff f019      	BREQ _0x74
000200 e1e9      	LDI  R30,LOW(25)
000201 15eb      	CP   R30,R11
000202 f421      	BRNE _0x73
                 _0x74:
000203 e0e2      	LDI  R30,LOW(2)
000204 93ea      	ST   -Y,R30
000205 e0e8      	LDI  R30,LOW(8)
000206 c00c      	RJMP _0x120
                 _0x73:
000207 e0ef      	LDI  R30,LOW(15)
000208 15eb      	CP   R30,R11
000209 f431      	BRNE _0x77
00020a 982b      	CBI  0x5,3
00020b e780
00020c e093
00020d 9701
00020e f7f1      	__DELAY_USW 880
00020f c006      	RJMP _0x7A
                 _0x77:
000210 e0e2      	LDI  R30,LOW(2)
000211 93ea      	ST   -Y,R30
000212 e0e3      	LDI  R30,LOW(3)
                 _0x120:
000213 93ea      	ST   -Y,R30
000214 940e 0586 	CALL SUBOPT_0x1
                 _0x7A:
000216 c07f      	RJMP _0x71
                 _0x72:
000217 30e6      	CPI  R30,LOW(0x6)
000218 f4e1      	BRNE _0x7B
000219 e0e8      	LDI  R30,LOW(8)
00021a 15eb      	CP   R30,R11
00021b f459      	BRNE _0x7C
00021c 940e 058c 	CALL SUBOPT_0x2
00021e 940e 00cd 	CALL _COM_write_register
                 _0x7D:
000220 9b1a      	SBIS 0x3,2
000221 cffe      	RJMP _0x7D
000222 e0ef      	LDI  R30,LOW(15)
000223 93ea      	ST   -Y,R30
000224 940e 00df 	CALL _COM_read_register
000226 c00d      	RJMP _0x80
                 _0x7C:
000227 e1e6      	LDI  R30,LOW(22)
000228 15eb      	CP   R30,R11
000229 f031      	BREQ _0x82
00022a e0e9      	LDI  R30,LOW(9)
00022b 15eb      	CP   R30,R11
00022c f019      	BREQ _0x82
00022d e1e9      	LDI  R30,LOW(25)
00022e 15eb      	CP   R30,R11
00022f f421      	BRNE _0x81
                 _0x82:
000230 940e 058c 	CALL SUBOPT_0x2
000232 940e 0586 	CALL SUBOPT_0x1
                 _0x81:
                 _0x80:
000234 c061      	RJMP _0x71
                 _0x7B:
000235 30e9      	CPI  R30,LOW(0x9)
000236 f4b1      	BRNE _0x84
000237 e0e8      	LDI  R30,LOW(8)
000238 15eb      	CP   R30,R11
000239 f429      	BRNE _0x85
00023a 940e 0591 	CALL SUBOPT_0x3
00023c 940e 0596 	CALL SUBOPT_0x4
00023e c00d      	RJMP _0x86
                 _0x85:
00023f e1e6      	LDI  R30,LOW(22)
000240 15eb      	CP   R30,R11
000241 f031      	BREQ _0x88
000242 e0e6      	LDI  R30,LOW(6)
000243 15eb      	CP   R30,R11
000244 f019      	BREQ _0x88
000245 e1e9      	LDI  R30,LOW(25)
000246 15eb      	CP   R30,R11
000247 f421      	BRNE _0x87
                 _0x88:
000248 940e 058c 	CALL SUBOPT_0x2
00024a 940e 0586 	CALL SUBOPT_0x1
                 _0x87:
                 _0x86:
00024c c049      	RJMP _0x71
                 _0x84:
00024d 31e6      	CPI  R30,LOW(0x16)
00024e f4e9      	BRNE _0x8A
00024f e0e8      	LDI  R30,LOW(8)
000250 15eb      	CP   R30,R11
000251 f429      	BRNE _0x8B
000252 940e 058c 	CALL SUBOPT_0x2
000254 940e 0596 	CALL SUBOPT_0x4
000256 c00e      	RJMP _0x121
                 _0x8B:
000257 e0e6      	LDI  R30,LOW(6)
000258 15eb      	CP   R30,R11
000259 f019      	BREQ _0x8E
00025a e0e9      	LDI  R30,LOW(9)
00025b 15eb      	CP   R30,R11
00025c f409      	BRNE _0x8D
                 _0x8E:
00025d c007      	RJMP _0x121
                 _0x8D:
00025e e1e9      	LDI  R30,LOW(25)
00025f 15eb      	CP   R30,R11
000260 f451      	BRNE _0x91
000261 940e 0591 	CALL SUBOPT_0x3
000263 940e 0586 	CALL SUBOPT_0x1
                 _0x121:
000265 e0e2      	LDI  R30,LOW(2)
000266 93ea      	ST   -Y,R30
000267 e1e6      	LDI  R30,LOW(22)
000268 93ea      	ST   -Y,R30
000269 940e 0586 	CALL SUBOPT_0x1
                 _0x91:
00026b c02a      	RJMP _0x71
                 _0x8A:
00026c 31e9      	CPI  R30,LOW(0x19)
00026d f4e9      	BRNE _0x92
00026e e0e8      	LDI  R30,LOW(8)
00026f 15eb      	CP   R30,R11
000270 f429      	BRNE _0x93
000271 940e 0591 	CALL SUBOPT_0x3
000273 940e 0596 	CALL SUBOPT_0x4
000275 c00e      	RJMP _0x122
                 _0x93:
000276 e0e6      	LDI  R30,LOW(6)
000277 15eb      	CP   R30,R11
000278 f019      	BREQ _0x96
000279 e0e9      	LDI  R30,LOW(9)
00027a 15eb      	CP   R30,R11
00027b f409      	BRNE _0x95
                 _0x96:
00027c c007      	RJMP _0x122
                 _0x95:
00027d e1e6      	LDI  R30,LOW(22)
00027e 15eb      	CP   R30,R11
00027f f451      	BRNE _0x99
000280 940e 058c 	CALL SUBOPT_0x2
000282 940e 0586 	CALL SUBOPT_0x1
                 _0x122:
000284 e0e2      	LDI  R30,LOW(2)
000285 93ea      	ST   -Y,R30
000286 e1e9      	LDI  R30,LOW(25)
000287 93ea      	ST   -Y,R30
000288 940e 0586 	CALL SUBOPT_0x1
                 _0x99:
00028a c00b      	RJMP _0x71
                 _0x92:
00028b 30ef      	CPI  R30,LOW(0xF)
00028c f449      	BRNE _0xA1
00028d e0e8      	LDI  R30,LOW(8)
00028e 15eb      	CP   R30,R11
00028f f431      	BRNE _0x9B
000290 9a2b      	SBI  0x5,3
000291 e01c      	LDI  R17,LOW(12)
                 _0x9F:
000292 3011      	CPI  R17,1
000293 f010      	BRLO _0xA0
000294 5011      	SUBI R17,1
000295 cffc      	RJMP _0x9F
                 _0xA0:
                 _0x9B:
                 _0xA1:
                 _0x71:
000296 940e 01ec 	CALL _HAL_get_state
000298 8118      	LDD  R17,Y+0
                 _0x11F:
000299 9622      	ADIW R28,2
00029a 9508      	RET
                 ;	mode -> Y+1
                 ;	tmp -> R17
                 ;	tmp -> R17
                 _HAL_energy_detection:
00029b 940e 01ec 	CALL _HAL_get_state
00029d e0e6      	LDI  R30,LOW(6)
00029e 15eb      	CP   R30,R11
00029f f019      	BREQ _0xA9
0002a0 e0e1      	LDI  R30,LOW(1)
0002a1 15eb      	CP   R30,R11
0002a2 f471      	BRNE _0xA8
                 _0xA9:
0002a3 e0e7      	LDI  R30,LOW(7)
0002a4 93ea      	ST   -Y,R30
0002a5 e0e0      	LDI  R30,LOW(0)
0002a6 93ea      	ST   -Y,R30
0002a7 940e 00cd 	CALL _COM_write_register
0002a9 eb8b
0002aa 958a
0002ab f7f1      	__DELAY_USB 187
0002ac e0e7      	LDI  R30,LOW(7)
0002ad 93ea      	ST   -Y,R30
0002ae 940e 00df 	CALL _COM_read_register
0002b0 9508      	RET
                 _0xA8:
0002b1 e0e0      	LDI  R30,LOW(0)
0002b2 9508      	RET
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	user_csma -> Y+1
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	hi -> Y+1
                 ;	lo -> Y+0
                 ;	hi -> Y+1
                 ;	lo -> Y+0
                 ;	retries -> Y+0
                 ;      31 #include "mega644_usart.h"
                 
                 	.DSEG
                 _usart_msg:
000507           	.BYTE 0x4
                 _usart_rx_buffer:
00050b           	.BYTE 0xD
                 
                 	.CSEG
                 _m644_init_usart:
0002b3 e0e1      	LDI  R30,LOW(1)
0002b4 2eae      	MOV  R10,R30
0002b5 24dd      	CLR  R13
0002b6 e4e2      	LDI  R30,LOW(66)
0002b7 93e0 00c0 	STS  192,R30
0002b9 ece0      	LDI  R30,LOW(192)
0002ba 93e0 00c1 	STS  193,R30
0002bc e0e6      	LDI  R30,LOW(6)
0002bd 93e0 00c2 	STS  194,R30
0002bf e0e0      	LDI  R30,LOW(0)
0002c0 93e0 00c5 	STS  197,R30
0002c2 93e0 00c4 	STS  196,R30
0002c4 93e0 0515 	__PUTB1MN _usart_rx_buffer,10
0002c6 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
0002c8 93e0 0517 	__PUTB1MN _usart_rx_buffer,12
0002ca d020      	RCALL _m644_enable_trx
0002cb 9508      	RET
                 _m644_add_message:
                 ;	*new_msg -> Y+1
                 ;	len -> Y+0
0002cc e0e1      	LDI  R30,LOW(1)
0002cd 15ed      	CP   R30,R13
0002ce f411      	BRNE _0xB6
0002cf e0e0      	LDI  R30,LOW(0)
0002d0 c00d      	RJMP _0x11E
                 _0xB6:
0002d1 81e8      	LD   R30,Y
0002d2 93e0 0507 	STS  _usart_msg,R30
0002d4 81e9      	LDD  R30,Y+1
0002d5 81fa      	LDD  R31,Y+1+1
0002d6 93e0 0508
0002d8 93f0 0509 	__PUTW1MN _usart_msg,1
0002da e0e0      	LDI  R30,LOW(0)
0002db 93e0 050a 	__PUTB1MN _usart_msg,3
0002dd e0e1      	LDI  R30,LOW(1)
                 _0x11E:
0002de 9623      	ADIW R28,3
0002df 9508      	RET
                 _m644_start_tx:
0002e0 91a0 050a 	__GETB2MN _usart_msg,3
0002e2 91e0 0507 	LDS  R30,_usart_msg
0002e4 17ae      	CP   R26,R30
0002e5 f420      	BRSH _0xB7
0002e6 e0e1      	LDI  R30,LOW(1)
0002e7 2ede      	MOV  R13,R30
0002e8 940e 059c 	CALL SUBOPT_0x5
                 _0xB7:
0002ea 9508      	RET
                 _m644_enable_trx:
0002eb 91e0 00c1 	LDS  R30,193
0002ed 61e8      	ORI  R30,LOW(0x18)
0002ee 93e0 00c1 	STS  193,R30
0002f0 9508      	RET
                 _handle_rxc:
0002f1 940e 05ad 	CALL SUBOPT_0x6
0002f3 931a      	ST   -Y,R17
                 ;	junk -> R17
0002f4 91a0 0517 	__GETB2MN _usart_rx_buffer,12
0002f6 30aa      	CPI  R26,LOW(0xA)
0002f7 f4c8      	BRSH _0xB8
0002f8 91e0 0516 	__GETB1MN _usart_rx_buffer,11
0002fa 5fef      	SUBI R30,-LOW(1)
0002fb 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
0002fd 940e 05b4 	CALL SUBOPT_0x7
0002ff 01df      	MOVW R26,R30
000300 91e0 00c6 	LDS  R30,198
000302 93ec      	ST   X,R30
000303 91e0 0517 	__GETB1MN _usart_rx_buffer,12
000305 5fef      	SUBI R30,-LOW(1)
000306 93e0 0517 	__PUTB1MN _usart_rx_buffer,12
000308 50e1      	SUBI R30,LOW(1)
000309 91a0 0516 	__GETB2MN _usart_rx_buffer,11
00030b 30aa      	CPI  R26,LOW(0xA)
00030c f419      	BRNE _0xB9
00030d e0e0      	LDI  R30,LOW(0)
00030e 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
                 _0xB9:
000310 c002      	RJMP _0xBA
                 _0xB8:
000311 9110 00c6 	LDS  R17,198
                 _0xBA:
000313 9119      	LD   R17,Y+
000314 c038      	RJMP _0x123
                 _get_usart_byte:
000315 931a      	ST   -Y,R17
                 ;	to_return -> R17
000316 e010      	LDI  R17,0
000317 91a0 0517 	__GETB2MN _usart_rx_buffer,12
000319 30a1      	CPI  R26,LOW(0x1)
00031a f0a8      	BRLO _0xBB
00031b 91e0 0515 	__GETB1MN _usart_rx_buffer,10
00031d 5fef      	SUBI R30,-LOW(1)
00031e 93e0 0515 	__PUTB1MN _usart_rx_buffer,10
000320 940e 05b4 	CALL SUBOPT_0x7
000322 8110      	LD   R17,Z
000323 91e0 0517 	__GETB1MN _usart_rx_buffer,12
000325 50e1      	SUBI R30,LOW(1)
000326 93e0 0517 	__PUTB1MN _usart_rx_buffer,12
000328 5fef      	SUBI R30,-LOW(1)
000329 91a0 0515 	__GETB2MN _usart_rx_buffer,10
00032b 30aa      	CPI  R26,LOW(0xA)
00032c f419      	BRNE _0xBC
00032d e0e0      	LDI  R30,LOW(0)
00032e 93e0 0515 	__PUTB1MN _usart_rx_buffer,10
                 _0xBC:
                 _0xBB:
000330 2fe1      	MOV  R30,R17
                 _0x11D:
000331 9119      	LD   R17,Y+
000332 9508      	RET
                 _is_buffer_empty:
000333 91e0 0517 	__GETB1MN _usart_rx_buffer,12
000335 30e0      	CPI  R30,0
000336 f411      	BRNE _0xBD
000337 e0e1      	LDI  R30,LOW(1)
000338 9508      	RET
                 _0xBD:
000339 e0e0      	LDI  R30,LOW(0)
00033a 9508      	RET
00033b 9508      	RET
                 _handle_txc:
00033c 940e 05ad 	CALL SUBOPT_0x6
00033e 9b5f      	SBIS 0xB,7
00033f c002      	RJMP _0xBF
000340 985f      	CBI  0xB,7
000341 c001      	RJMP _0xC0
                 _0xBF:
000342 9a5f      	SBI  0xB,7
                 _0xC0:
000343 91a0 050a 	__GETB2MN _usart_msg,3
000345 91e0 0507 	LDS  R30,_usart_msg
000347 17ea      	CP   R30,R26
000348 f411      	BRNE _0xC1
000349 24dd      	CLR  R13
00034a c002      	RJMP _0xC2
                 _0xC1:
00034b 940e 059c 	CALL SUBOPT_0x5
                 _0xC2:
                 _0x123:
00034d 91e9      	LD   R30,Y+
00034e bfef      	OUT  SREG,R30
00034f 91f9      	LD   R31,Y+
000350 91e9      	LD   R30,Y+
000351 91b9      	LD   R27,Y+
000352 91a9      	LD   R26,Y+
000353 9518      	RETI
                 ;      32 
                 ;      33 unsigned int ms_counter;
                 
                 	.DSEG
                 _ms_counter:
000518           	.BYTE 0x2
                 ;      34 
                 ;      35 /*
                 ;      36 Program description:
                 ;      37     Program will initialize everything on boot and wait for input from C++ program.
                 ;      38     C++ program will set the listening channel and tell sniffer to start listening
                 ;      39     Sniffer will then turn RX on and report any events via the USART.
                 ;      40 */
                 ;      41 
                 ;      42 // Sniffer States
                 ;      43 #define     INIT    0
                 ;      44 #define     WAIT    1
                 ;      45 #define     RUNNING 2
                 ;      46 #define     TEST    3
                 ;      47 #define     ENERGY_DETECTION 4
                 ;      48 
                 ;      49 // USART Rx States
                 ;      50 #define     RX_WAIT     0
                 ;      51 #define     RX_SET_CHAN 1
                 ;      52 
                 ;      53 #define     RX_ACK      0xdd    // pre-define 0xdd to tell visual c++ program that we're done receiving
                 ;      54 #define     RX_ED       0xaa
                 ;      55 
                 ;      56 //usart rx commands
                 ;      57 #define     RX_CMD_SET_CHAN     0xab
                 ;      58 #define     RX_CMD_RUN          0xca
                 ;      59 #define     RX_CMD_HALT         0x9d
                 ;      60 #define     RX_CMD_ED           0xba  // energy detection
                 ;      61 
                 ;      62 unsigned char ack[4] = {0xff,0xff,0xff,0xdd};
                 _ack:
00051a           	.BYTE 0x4
                 ;      63 unsigned char *g_ack_head = ack;
                 _g_ack_head:
00051e           	.BYTE 0x2
                 ;      64 unsigned char preamble[5] = {0xff,0xff,0xff,0xff,0x00};  // last byte of preamble will hold message size
                 _preamble:
000520           	.BYTE 0x5
                 ;      65 unsigned char *g_preamble_head = preamble;
                 _g_preamble_head:
000525           	.BYTE 0x2
                 ;      66 unsigned char ed_preamble[4] = {0xff,0xff,0xff,0xaa};
                 _ed_preamble:
000527           	.BYTE 0x4
                 ;      67 unsigned char *g_ed_preamble_head = ed_preamble;
                 _g_ed_preamble_head:
00052b           	.BYTE 0x2
                 ;      68 
                 ;      69 
                 ;      70 interrupt [TIM1_COMPA] void handle_tim1(void) {
                 
                 	.CSEG
                 _handle_tim1:
000354 920a      	ST   -Y,R0
000355 93aa      	ST   -Y,R26
000356 93ba      	ST   -Y,R27
000357 93ea      	ST   -Y,R30
000358 93fa      	ST   -Y,R31
000359 b7ef      	IN   R30,SREG
00035a 93ea      	ST   -Y,R30
                 ;      71     if (ms_counter > 0)
00035b 91a0 0518 	LDS  R26,_ms_counter
00035d 91b0 0519 	LDS  R27,_ms_counter+1
00035f 940e 05ef 	CALL __CPW02
000361 f438      	BRSH _0xC9
                 ;      72         ms_counter--;
000362 91e0 0518 	LDS  R30,_ms_counter
000364 91f0 0519 	LDS  R31,_ms_counter+1
000366 9731      	SBIW R30,1
000367 940e 05b9 	CALL SUBOPT_0x8
                 ;      73 }
                 _0xC9:
000369 91e9      	LD   R30,Y+
00036a bfef      	OUT  SREG,R30
00036b 91f9      	LD   R31,Y+
00036c 91e9      	LD   R30,Y+
00036d 91b9      	LD   R27,Y+
00036e 91a9      	LD   R26,Y+
00036f 9009      	LD   R0,Y+
000370 9518      	RETI
                 ;      74 
                 ;      75 void usart_rx_ack(void);
                 ;      76 void usart_rx_preamble(unsigned char size);
                 ;      77 void usart_rx_ed_preamble(void);
                 ;      78 
                 ;      79 void main(void)  {
                 _main:
                 ;      80     unsigned char my_msg[255];    // big enough to hold any single message
                 ;      81     unsigned char *string_head;   // make sure we keep track of start of array
                 ;      82     unsigned char ack_msg[4];
                 ;      83     unsigned char *ack_head;
                 ;      84     unsigned char i;
                 ;      85     unsigned char sniffer_state;  // keep track of what sniffer's doing
                 ;      86     unsigned char rx_state;       // keep track of what usart rx state machine is doing
                 ;      87     unsigned char my_rx_data;
                 ;      88 
                 ;      89     sniffer_state = INIT;
000371 9725      	SBIW R28,5
000372 50d1      	SUBI R29,1
                 ;	my_msg -> Y+6
                 ;	*string_head -> R16,R17
                 ;	ack_msg -> Y+2
                 ;	*ack_head -> R18,R19
                 ;	i -> R21
                 ;	sniffer_state -> R20
                 ;	rx_state -> Y+1
                 ;	my_rx_data -> Y+0
000373 e040      	LDI  R20,LOW(0)
                 ;      90     COM_init();
000374 940e 00a5 	CALL _COM_init
                 ;      91     COM_set_MCU_clock(3);   // set clock to 4 MHz
000376 e0e3      	LDI  R30,LOW(3)
000377 93ea      	ST   -Y,R30
000378 940e 00ba 	CALL _COM_set_MCU_clock
                 ;      92     COM_enable_interrupt_IRQ();
00037a 940e 0158 	CALL _COM_enable_interrupt_IRQ
                 ;      93     HAL_initialization();
00037c 940e 0173 	CALL _HAL_initialization
                 ;      94 
                 ;      95     // timer initialization
                 ;      96     TCCR1A = 0b00000000;
00037e e0e0      	LDI  R30,LOW(0)
00037f 93e0 0080 	STS  128,R30
                 ;      97     OCR1AH = 1;
000381 e0e1      	LDI  R30,LOW(1)
000382 93e0 0089 	STS  137,R30
                 ;      98     OCR1AL = 0b11110100;
000384 efe4      	LDI  R30,LOW(244)
000385 93e0 0088 	STS  136,R30
                 ;      99     TCCR1B = 0b00001010; // clk/8... count to 500 for 1ms at 4MHz.
000387 e0ea      	LDI  R30,LOW(10)
000388 93e0 0081 	STS  129,R30
                 ;     100     TCCR1C = 0;
00038a e0e0      	LDI  R30,LOW(0)
00038b 93e0 0082 	STS  130,R30
                 ;     101     TIMSK1 = 0b00000010;  // interrupt on compare A match
00038d e0e2      	LDI  R30,LOW(2)
00038e 93e0 006f 	STS  111,R30
                 ;     102 
                 ;     103     m644_init_usart();  // attempt high speed connection
000390 940e 02b3 	CALL _m644_init_usart
                 ;     104 
                 ;     105     ms_counter = 500;  // one half second
000392 efe4      	LDI  R30,LOW(500)
000393 e0f1      	LDI  R31,HIGH(500)
000394 940e 05b9 	CALL SUBOPT_0x8
                 ;     106 
                 ;     107     #asm
                 ;     108         sei
000396 9478              sei
                 ;     109     #endasm
                 ;     110 
                 ;     111     rx_state = RX_WAIT;
000397 e0e0      	LDI  R30,LOW(0)
000398 83e9      	STD  Y+1,R30
                 ;     112 
                 ;     113     HAL_set_state(STATUS_TRX_OFF);  // initialize radio's state
000399 940e 05be 	CALL SUBOPT_0x9
                 ;     114 
                 ;     115     string_head = my_msg;
00039b 01fe      	MOVW R30,R28
00039c 9636      	ADIW R30,6
00039d 018f      	MOVW R16,R30
                 ;     116     for (i=0; i<4; i++) {
00039e e050      	LDI  R21,LOW(0)
                 _0xCB:
00039f 3054      	CPI  R21,4
0003a0 f448      	BRSH _0xCC
                 ;     117         my_msg[i] = 0xff;  // preamble
0003a1 2fe5      	MOV  R30,R21
0003a2 940e 05c2 	CALL SUBOPT_0xA
0003a4 0fae      	ADD  R26,R30
0003a5 1fbf      	ADC  R27,R31
0003a6 efef      	LDI  R30,LOW(255)
0003a7 93ec      	ST   X,R30
                 ;     118     }
0003a8 5f5f      	SUBI R21,-1
0003a9 cff5      	RJMP _0xCB
                 _0xCC:
                 ;     119     my_msg[4] = 15;
0003aa e0ef      	LDI  R30,LOW(15)
0003ab 87ea      	STD  Y+10,R30
                 ;     120     for (i=0;i<15;i++)  {
0003ac e050      	LDI  R21,LOW(0)
                 _0xCE:
0003ad 305f      	CPI  R21,15
0003ae f448      	BRSH _0xCF
                 ;     121         my_msg[i+5] = i;
0003af 2fe5      	MOV  R30,R21
0003b0 5feb      	SUBI R30,-LOW(5)
0003b1 940e 05c2 	CALL SUBOPT_0xA
0003b3 0fea      	ADD  R30,R26
0003b4 1ffb      	ADC  R31,R27
0003b5 8350      	ST   Z,R21
                 ;     122     }
0003b6 5f5f      	SUBI R21,-1
0003b7 cff5      	RJMP _0xCE
                 _0xCF:
                 ;     123 
                 ;     124     ack_head = ack_msg;
0003b8 01fe      	MOVW R30,R28
0003b9 9632      	ADIW R30,2
0003ba 019f      	MOVW R18,R30
                 ;     125     for (i=0; i<3; i++)  {
0003bb e050      	LDI  R21,LOW(0)
                 _0xD1:
0003bc 3053      	CPI  R21,3
0003bd f450      	BRSH _0xD2
                 ;     126         ack_msg[i] = 0xff;
0003be 2fe5      	MOV  R30,R21
0003bf e0f0      	LDI  R31,0
0003c0 01de      	MOVW R26,R28
0003c1 9612      	ADIW R26,2
0003c2 0fae      	ADD  R26,R30
0003c3 1fbf      	ADC  R27,R31
0003c4 efef      	LDI  R30,LOW(255)
0003c5 93ec      	ST   X,R30
                 ;     127     }
0003c6 5f5f      	SUBI R21,-1
0003c7 cff4      	RJMP _0xD1
                 _0xD2:
                 ;     128     ack_msg[3] = 0xdd;
0003c8 eded      	LDI  R30,LOW(221)
0003c9 83ed      	STD  Y+5,R30
                 ;     129 
                 ;     130     sniffer_state = WAIT;
0003ca e041      	LDI  R20,LOW(1)
                 ;     131 
                 ;     132     /// todo: separate the two state machines for cleaner code.
                 ;     133 
                 ;     134     while(1)  {    // need to check certain flags in usart module periodically and act appropriately
                 _0xD3:
                 ;     135         //First, check for messages.
                 ;     136         if (is_buffer_empty() == 0)  {
0003cb 940e 0333 	CALL _is_buffer_empty
0003cd 30e0      	CPI  R30,0
0003ce f591      	BRNE _0xD6
                 ;     137             my_rx_data = get_usart_byte();  // get the message from the buffer.
0003cf 940e 0315 	CALL _get_usart_byte
0003d1 83e8      	ST   Y,R30
                 ;     138 
                 ;     139             // first, check special case RX events
                 ;     140             if (rx_state == RX_SET_CHAN)  {
0003d2 81a9      	LDD  R26,Y+1
0003d3 30a1      	CPI  R26,LOW(0x1)
0003d4 f439      	BRNE _0xD7
                 ;     141                 HAL_set_radio_channel(my_rx_data);
0003d5 93ea      	ST   -Y,R30
0003d6 940e 01c9 	CALL _HAL_set_radio_channel
                 ;     142                 rx_state = RX_WAIT;
0003d8 e0e0      	LDI  R30,LOW(0)
0003d9 83e9      	STD  Y+1,R30
                 ;     143                 usart_rx_ack();  // acknowledge successful channel change
0003da d07b      	RCALL _usart_rx_ack
                 ;     144             }
                 ;     145             else if (rx_state == RX_WAIT)  {
0003db c025      	RJMP _0xD8
                 _0xD7:
0003dc 81e9      	LDD  R30,Y+1
0003dd 30e0      	CPI  R30,0
0003de f511      	BRNE _0xD9
                 ;     146                 if (my_rx_data == RX_CMD_RUN)  {
0003df 81a8      	LD   R26,Y
0003e0 3caa      	CPI  R26,LOW(0xCA)
0003e1 f429      	BRNE _0xDA
                 ;     147                     HAL_set_state(STATUS_RX_ON);  // turn rx on if it's off
0003e2 940e 05c6 	CALL SUBOPT_0xB
                 ;     148                     sniffer_state = RUNNING;
0003e4 e042      	LDI  R20,LOW(2)
                 ;     149                     usart_rx_ack();
0003e5 d070      	RCALL _usart_rx_ack
                 ;     150                 }
                 ;     151 
                 ;     152                 else if (my_rx_data == RX_CMD_HALT)  {
0003e6 c01a      	RJMP _0xDB
                 _0xDA:
0003e7 81a8      	LD   R26,Y
0003e8 39ad      	CPI  R26,LOW(0x9D)
0003e9 f429      	BRNE _0xDC
                 ;     153                     HAL_set_state(STATUS_TRX_OFF);  // turn rx off if it is on
0003ea 940e 05be 	CALL SUBOPT_0x9
                 ;     154                     sniffer_state = WAIT;
0003ec e041      	LDI  R20,LOW(1)
                 ;     155                     usart_rx_ack();
0003ed d068      	RCALL _usart_rx_ack
                 ;     156                 }
                 ;     157 
                 ;     158                 else if (my_rx_data == RX_CMD_ED)  {
0003ee c012      	RJMP _0xDD
                 _0xDC:
0003ef 81a8      	LD   R26,Y
0003f0 3baa      	CPI  R26,LOW(0xBA)
0003f1 f451      	BRNE _0xDE
                 ;     159                     HAL_set_state(STATUS_RX_ON);  // turn rx on
0003f2 940e 05c6 	CALL SUBOPT_0xB
                 ;     160                     sniffer_state = ENERGY_DETECTION;
0003f4 e044      	LDI  R20,LOW(4)
                 ;     161                     usart_rx_ack();
0003f5 d060      	RCALL _usart_rx_ack
                 ;     162                     ms_counter = 0;
0003f6 e0e0      	LDI  R30,0
0003f7 93e0 0518 	STS  _ms_counter,R30
0003f9 93e0 0519 	STS  _ms_counter+1,R30
                 ;     163                 }
                 ;     164 
                 ;     165                 else if (my_rx_data == RX_CMD_SET_CHAN)  {
0003fb c005      	RJMP _0xDF
                 _0xDE:
0003fc 81a8      	LD   R26,Y
0003fd 3aab      	CPI  R26,LOW(0xAB)
0003fe f411      	BRNE _0xE0
                 ;     166                     rx_state = RX_SET_CHAN;
0003ff e0e1      	LDI  R30,LOW(1)
000400 83e9      	STD  Y+1,R30
                 ;     167                 }
                 ;     168             }
                 _0xE0:
                 _0xDF:
                 _0xDD:
                 _0xDB:
                 ;     169         }
                 _0xD9:
                 _0xD8:
                 ;     170 
                 ;     171         if (sniffer_state == WAIT)  {
                 _0xD6:
000401 3041      	CPI  R20,1
000402 f409      	BRNE _0xE1
                 ;     172             // for now, just do nothing. wait.
                 ;     173         }
                 ;     174 
                 ;     175         else if (sniffer_state == RUNNING)  {
000403 c050      	RJMP _0xE2
                 _0xE1:
000404 3042      	CPI  R20,2
000405 f4e1      	BRNE _0xE3
                 ;     176             if (COM_IRQ_pending == 1)  {  // radio has info for the application
000406 91a0 0505 	LDS  R26,_COM_IRQ_pending
000408 30a1      	CPI  R26,LOW(0x1)
000409 f4b9      	BRNE _0xE4
                 ;     177                 COM_IRQ_handler();   // figure out what the IRQ is.
00040a 940e 0165 	CALL _COM_IRQ_handler
                 ;     178                 if (COM_IRQ_status == IRQ_RX_START)  {
00040c 91a0 0506 	LDS  R26,_COM_IRQ_status
00040e 30a4      	CPI  R26,LOW(0x4)
00040f f469      	BRNE _0xE5
                 ;     179                     COM_upload_frame();  // upload the frame from the radio
000410 940e 00f2 	CALL _COM_upload_frame
                 ;     180                     // now, transmit the data over the USART.
                 ;     181                     // first, transmit the preamble and message size
                 ;     182                     usart_rx_preamble(HAL_rx_frame_length);
000412 928a      	ST   -Y,R8
000413 d04c      	RCALL _usart_rx_preamble
                 ;     183                     // then, pass the usart the pointer to the 802.15.4 message string
                 ;     184                     while(busy_flag == 1);
                 _0xE6:
000414 e0e1      	LDI  R30,LOW(1)
000415 15ed      	CP   R30,R13
000416 f3e9      	BREQ _0xE6
                 ;     185                     m644_add_message(HAL_rx_frame,HAL_rx_frame_length);
000417 927a      	ST   -Y,R7
000418 926a      	ST   -Y,R6
000419 928a      	ST   -Y,R8
00041a 940e 05ca 	CALL SUBOPT_0xC
                 ;     186                     m644_start_tx();
                 ;     187                 }
                 ;     188                 else if (COM_IRQ_status == IRQ_TRX_END)  {  // either we missed the RX_START IRQ or this is just happening at the end of a received frame that we've already started downloading.
00041c c004      	RJMP _0xE9
                 _0xE5:
00041d 91a0 0506 	LDS  R26,_COM_IRQ_status
00041f 30a8      	CPI  R26,LOW(0x8)
000420 f401      	BRNE _0xEA
                 ;     189                 }
                 ;     190             }
                 _0xEA:
                 _0xE9:
                 ;     191         }
                 _0xE4:
                 ;     192 
                 ;     193         else if (sniffer_state == ENERGY_DETECTION)  {
000421 c032      	RJMP _0xEB
                 _0xE3:
000422 3044      	CPI  R20,4
000423 f581      	BRNE _0xEC
                 ;     194             if (ms_counter == 0)  {
000424 91e0 0518 	LDS  R30,_ms_counter
000426 91f0 0519 	LDS  R31,_ms_counter+1
000428 9730      	SBIW R30,0
000429 f551      	BRNE _0xED
                 ;     195                 for (i=11;i<=26;i++)  {  // iterate through the channels and form a message to send
00042a e05b      	LDI  R21,LOW(11)
                 _0xEF:
00042b 315b      	CPI  R21,27
00042c f4b0      	BRSH _0xF0
                 ;     196                     HAL_set_radio_channel(i);
00042d 935a      	ST   -Y,R21
00042e 940e 01c9 	CALL _HAL_set_radio_channel
                 ;     197                     HAL_set_state(STATUS_RX_ON);
000430 940e 05c6 	CALL SUBOPT_0xB
                 ;     198                     my_msg[i-11] = HAL_energy_detection();
000432 2fe5      	MOV  R30,R21
000433 50eb      	SUBI R30,LOW(11)
000434 940e 05c2 	CALL SUBOPT_0xA
000436 0fea      	ADD  R30,R26
000437 1ffb      	ADC  R31,R27
000438 93ff      	PUSH R31
000439 93ef      	PUSH R30
00043a 940e 029b 	CALL _HAL_energy_detection
00043c 91af      	POP  R26
00043d 91bf      	POP  R27
00043e 93ec      	ST   X,R30
                 ;     199                     HAL_set_state(STATUS_TRX_OFF);
00043f 940e 05be 	CALL SUBOPT_0x9
                 ;     200                 }
000441 5f5f      	SUBI R21,-1
000442 cfe8      	RJMP _0xEF
                 _0xF0:
                 ;     201                 usart_rx_ed_preamble();
000443 d02e      	RCALL _usart_rx_ed_preamble
                 ;     202                 while(busy_flag == 1);
                 _0xF1:
000444 e0e1      	LDI  R30,LOW(1)
000445 15ed      	CP   R30,R13
000446 f3e9      	BREQ _0xF1
                 ;     203                 m644_add_message(string_head,16);
000447 931a      	ST   -Y,R17
000448 930a      	ST   -Y,R16
000449 e1e0      	LDI  R30,LOW(16)
00044a 93ea      	ST   -Y,R30
00044b 940e 05ca 	CALL SUBOPT_0xC
                 ;     204                 m644_start_tx();
                 ;     205                 while(busy_flag == 1);
                 _0xF4:
00044d e0e1      	LDI  R30,LOW(1)
00044e 15ed      	CP   R30,R13
00044f f3e9      	BREQ _0xF4
                 ;     206                 ms_counter = 50; // wait a little bit before taking the next sample
000450 e3e2      	LDI  R30,LOW(50)
000451 e0f0      	LDI  R31,HIGH(50)
000452 940e 05b9 	CALL SUBOPT_0x8
                 ;     207             }
                 ;     208         }
                 _0xED:
                 ;     209 
                 ;     210      /*   if (sniffer_state == WAIT)  {
                 ;     211             if (is_buffer_empty() == 0)  {  // message ready and waiting
                 ;     212                 my_rx_data = get_usart_byte();  // get the next byte from the buffer. Then, analyze that byte.
                 ;     213                 if (rx_state == RX_WAIT)  {
                 ;     214                     if (my_rx_data == RX_CMD_SET_CHAN)  {
                 ;     215                         rx_state = RX_SET_CHAN;
                 ;     216                     }
                 ;     217                     else if (my_rx_data == RX_CMD_RUN)  {
                 ;     218                         HAL_set_state(STATUS_RX_ON);      // Activate receiver
                 ;     219                         sniffer_state = RUNNING;
                 ;     220                         usart_rx_ack();  // acknowledge the run command
                 ;     221                     }
                 ;     222                     else if(my_rx_data == RX_CMD_ED)  {
                 ;     223                         HAL_set_state(STATUS_RX_ON);
                 ;     224                         sniffer_state = ENERGY_DETECTION;
                 ;     225                         usart_rx_ack();
                 ;     226                         ms_counter = 0;
                 ;     227                     }
                 ;     228                 }
                 ;     229                 else if (rx_state == RX_SET_CHAN)  {
                 ;     230                     HAL_set_radio_channel(my_rx_data);    // set the appropriate channel. TODO: CHECK TO SEE IF CHANNEL IS CLEARED WHEN CHANGING RADIO STATE...
                 ;     231                     rx_state = RX_WAIT;
                 ;     232                     usart_rx_ack();  // acknowledge the channel change message   /// TODO: add capability to report errors?
                 ;     233                 }
                 ;     234             }
                 ;     235         }
                 ;     236         else if (sniffer_state == RUNNING)  {
                 ;     237             if (is_buffer_empty() == 0)  {  // message ready and waiting. Check to see if we should stop
                 ;     238                 my_rx_data = get_usart_byte();
                 ;     239                 if (rx_state == RX_WAIT)  {
                 ;     240                     if (my_rx_data == RX_CMD_HALT)  {
                 ;     241                         HAL_set_state(STATUS_TRX_OFF);  // disable receiver
                 ;     242                         sniffer_state = WAIT;  // back to wait... wait for command to restart
                 ;     243                         while(busy_flag == 1);
                 ;     244                         m644_add_message(ack_head,4);
                 ;     245                         m644_start_tx();
                 ;     246                     }
                 ;     247                 }
                 ;     248             }
                 ;     249 
                 ;     250             if (COM_IRQ_pending == 1)  {  // radio has info for the application   /// TODO: THIS DOES NOT WORK! METHOD FOR SENDING PREAMBLE IS BROKEN
                 ;     251                 if (COM_IRQ_status == IRQ_RX_START)  {
                 ;     252                     COM_upload_frame();  // upload the frame from the radio
                 ;     253                     // now, transmit the data over the USART.
                 ;     254                     // first, transmit the preamble and message size
                 ;     255                     usart_rx_preamble(HAL_rx_frame_length);
                 ;     256                     // then, pass the usart the pointer to the 802.15.4 message string
                 ;     257                     while(busy_flag == 1);
                 ;     258                     m644_add_message(HAL_rx_frame,HAL_rx_frame_length);
                 ;     259                     m644_start_tx();
                 ;     260                 }
                 ;     261                 else if (COM_IRQ_status == IRQ_TRX_END)  {  // either we missed the RX_START IRQ or this is just happening at the end of a received frame that we've already started downloading.
                 ;     262                 }
                 ;     263             }
                 ;     264         }
                 ;     265         else if (sniffer_state == TEST)  {
                 ;     266             while(busy_flag == 1);
                 ;     267             while(ms_counter > 0);
                 ;     268             m644_add_message(ack_head,4);
                 ;     269             m644_start_tx();
                 ;     270             ms_counter = 100;
                 ;     271         }
                 ;     272         else if (sniffer_state == ENERGY_DETECTION)  {  // special mode. Iterate each channel, do detection, report findings to Visual C++ program.
                 ;     273             if (is_buffer_empty() == 0)  {  // message ready and waiting
                 ;     274                 my_rx_data = get_usart_byte();  // get the message
                 ;     275                 if (my_rx_data == RX_CMD_HALT)  {
                 ;     276                     HAL_set_state(STATUS_TRX_OFF);
                 ;     277                     sniffer_state = WAIT;
                 ;     278                     rx_state = RX_WAIT;
                 ;     279                     usart_rx_ack();
                 ;     280                 }
                 ;     281             }
                 ;     282             else if (ms_counter == 0)  {
                 ;     283                 for (i=11;i<=26;i++)  {  // iterate through the channels and form a message to send
                 ;     284                     HAL_set_radio_channel(i);
                 ;     285                     HAL_set_state(STATUS_RX_ON);
                 ;     286                     my_msg[i-11] = HAL_energy_detection();
                 ;     287                     HAL_set_state(STATUS_TRX_OFF);
                 ;     288                 }
                 ;     289                 usart_rx_ed_preamble();
                 ;     290                 while(busy_flag == 1);
                 ;     291                 m644_add_message(string_head,16);
                 ;     292                 m644_start_tx();
                 ;     293                 while(busy_flag == 1);
                 ;     294                 ms_counter = 50; // wait a little bit before taking the next sample
                 ;     295             }
                 ;     296         }  */
                 ;     297     }
                 _0xEC:
                 _0xEB:
                 _0xE2:
000454 cf76      	RJMP _0xD3
                 ;     298 }
                 _0xF7:
000455 cfff      	RJMP _0xF7
                 ;     299 
                 ;     300 void usart_rx_ack(void)  {
                 _usart_rx_ack:
                 ;     301     while(busy_flag == 1);
                 _0xF8:
000456 e0e1      	LDI  R30,LOW(1)
000457 15ed      	CP   R30,R13
000458 f3e9      	BREQ _0xF8
                 ;     302     m644_add_message(g_ack_head,4);  // send a one byte response. 3 bytes of ff, then one command byte. In this case, ack.
000459 91e0 051e 	LDS  R30,_g_ack_head
00045b 91f0 051f 	LDS  R31,_g_ack_head+1
00045d 940e 05ce 	CALL SUBOPT_0xD
                 ;     303     m644_start_tx();
                 ;     304 }
00045f 9508      	RET
                 ;     305 
                 ;     306 void usart_rx_preamble(unsigned char size)  {  // pass the size of the message to come
                 _usart_rx_preamble:
                 ;     307     preamble[4] = size;
                 ;	size -> Y+0
000460 81e8      	LD   R30,Y
000461 93e0 0524 	__PUTB1MN _preamble,4
                 ;     308     while (busy_flag == 1);  // wait until we can transmit safely
                 _0xFB:
000463 e0e1      	LDI  R30,LOW(1)
000464 15ed      	CP   R30,R13
000465 f3e9      	BREQ _0xFB
                 ;     309     m644_add_message(g_preamble_head,5);
000466 91e0 0525 	LDS  R30,_g_preamble_head
000468 91f0 0526 	LDS  R31,_g_preamble_head+1
00046a 93fa      	ST   -Y,R31
00046b 93ea      	ST   -Y,R30
00046c e0e5      	LDI  R30,LOW(5)
00046d 93ea      	ST   -Y,R30
00046e 940e 05ca 	CALL SUBOPT_0xC
                 ;     310     m644_start_tx();
                 ;     311 }
000470 9621      	ADIW R28,1
000471 9508      	RET
                 ;     312 
                 ;     313 void usart_rx_ed_preamble()  {
                 _usart_rx_ed_preamble:
                 ;     314     while (busy_flag == 1);
                 _0xFE:
000472 e0e1      	LDI  R30,LOW(1)
000473 15ed      	CP   R30,R13
000474 f3e9      	BREQ _0xFE
                 ;     315     m644_add_message(g_ed_preamble_head,4);
000475 91e0 052b 	LDS  R30,_g_ed_preamble_head
000477 91f0 052c 	LDS  R31,_g_ed_preamble_head+1
000479 940e 05ce 	CALL SUBOPT_0xD
                 ;     316     m644_start_tx();
                 ;     317 }
00047b 9508      	RET
                 
                 _allocate_block_G2:
00047c 9722      	SBIW R28,2
00047d 940e 05f3 	CALL __SAVELOCR6
00047f e000
000480 e110      	__GETWRN 16,17,4096
000481 01d8      	MOVW R26,R16
000482 e0e0      	LDI  R30,LOW(0)
000483 e0f0      	LDI  R31,HIGH(0)
000484 93ed      	ST   X+,R30
000485 93fc      	ST   X,R31
                 _0x101:
000486 2e00      	MOV  R0,R16
000487 2a01      	OR   R0,R17
000488 f1a1      	BREQ _0x103
000489 01d8      	MOVW R26,R16
00048a 940e 05eb 	CALL __GETW1P
00048c 0fe0      	ADD  R30,R16
00048d 1ff1      	ADC  R31,R17
00048e 9634      	ADIW R30,4
00048f 01af      	MOVW R20,R30
000490 9612      	ADIW R26,2
000491 940e 05eb 	CALL __GETW1P
000493 019f      	MOVW R18,R30
000494 9730      	SBIW R30,0
000495 f019      	BREQ _0x104
000496 832e
000497 833f      	__PUTWSR 18,19,6
000498 c004      	RJMP _0x105
                 _0x104:
000499 e0e0      	LDI  R30,LOW(4352)
00049a e1f1      	LDI  R31,HIGH(4352)
00049b 83ee      	STD  Y+6,R30
00049c 83ff      	STD  Y+6+1,R31
                 _0x105:
00049d 81ee      	LDD  R30,Y+6
00049e 81ff      	LDD  R31,Y+6+1
00049f 1be4      	SUB  R30,R20
0004a0 0bf5      	SBC  R31,R21
0004a1 01df      	MOVW R26,R30
0004a2 85e8      	LDD  R30,Y+8
0004a3 85f9      	LDD  R31,Y+8+1
0004a4 9634      	ADIW R30,4
0004a5 17ae      	CP   R26,R30
0004a6 07bf      	CPC  R27,R31
0004a7 f098      	BRLO _0x106
0004a8 01fa      	MOVW R30,R20
0004a9 01d8
0004aa 9612
0004ab 93ed
0004ac 93fc      	__PUTW1RNS 16,2
0004ad 01f9      	MOVW R30,R18
0004ae 01da
0004af 9612
0004b0 93ed
0004b1 93fc      	__PUTW1RNS 20,2
0004b2 85e8      	LDD  R30,Y+8
0004b3 85f9      	LDD  R31,Y+8+1
0004b4 01da      	MOVW R26,R20
0004b5 93ed      	ST   X+,R30
0004b6 93fc      	ST   X,R31
0004b7 5f4c
0004b8 4f5f      	__ADDWRN 20,21,4
0004b9 01fa      	MOVW R30,R20
0004ba c004      	RJMP _0x11C
                 _0x106:
0004bb 0189      	MOVW R16,R18
0004bc cfc9      	RJMP _0x101
                 _0x103:
0004bd e0e0      	LDI  R30,LOW(0)
0004be e0f0      	LDI  R31,HIGH(0)
                 _0x11C:
0004bf 940e 05fa 	CALL __LOADLOCR6
0004c1 962a      	ADIW R28,10
0004c2 9508      	RET
                 _find_prev_block_G2:
0004c3 940e 05f5 	CALL __SAVELOCR4
0004c5 e000
0004c6 e110      	__GETWRN 16,17,4096
                 _0x107:
0004c7 2e00      	MOV  R0,R16
0004c8 2a01      	OR   R0,R17
0004c9 f079      	BREQ _0x109
0004ca 01d8      	MOVW R26,R16
0004cb 9612      	ADIW R26,2
0004cc 940e 05eb 	CALL __GETW1P
0004ce 019f      	MOVW R18,R30
0004cf 01df      	MOVW R26,R30
0004d0 81ec      	LDD  R30,Y+4
0004d1 81fd      	LDD  R31,Y+4+1
0004d2 17ea      	CP   R30,R26
0004d3 07fb      	CPC  R31,R27
0004d4 f411      	BRNE _0x10A
0004d5 01f8      	MOVW R30,R16
0004d6 c004      	RJMP _0x11B
                 _0x10A:
0004d7 0189      	MOVW R16,R18
0004d8 cfee      	RJMP _0x107
                 _0x109:
0004d9 e0e0      	LDI  R30,LOW(0)
0004da e0f0      	LDI  R31,HIGH(0)
                 _0x11B:
0004db 940e 05fc 	CALL __LOADLOCR4
0004dd 9626      	ADIW R28,6
0004de 9508      	RET
                 _realloc:
0004df 9722      	SBIW R28,2
0004e0 940e 05f3 	CALL __SAVELOCR6
0004e2 85ea      	LDD  R30,Y+10
0004e3 85fb      	LDD  R31,Y+10+1
0004e4 9730      	SBIW R30,0
0004e5 f411      	BRNE PC+3
0004e6 940c 0526 	JMP _0x10B
0004e8 9734      	SBIW R30,4
0004e9 018f      	MOVW R16,R30
0004ea 931a      	ST   -Y,R17
0004eb 930a      	ST   -Y,R16
0004ec 940e 04c3 	CALL _find_prev_block_G2
0004ee 019f      	MOVW R18,R30
0004ef 9730      	SBIW R30,0
0004f0 f1a9      	BREQ _0x10C
0004f1 01d8      	MOVW R26,R16
0004f2 9612      	ADIW R26,2
0004f3 940e 05eb 	CALL __GETW1P
0004f5 01d9
0004f6 9612
0004f7 93ed
0004f8 93fc      	__PUTW1RNS 18,2
0004f9 85e8      	LDD  R30,Y+8
0004fa 85f9      	LDD  R31,Y+8+1
0004fb 9730      	SBIW R30,0
0004fc f149      	BREQ _0x10D
0004fd 93fa      	ST   -Y,R31
0004fe 93ea      	ST   -Y,R30
0004ff 940e 047c 	CALL _allocate_block_G2
000501 01af      	MOVW R20,R30
000502 9730      	SBIW R30,0
000503 f0e9      	BREQ _0x10E
000504 01d8      	MOVW R26,R16
000505 940e 05eb 	CALL __GETW1P
000507 83ee      	STD  Y+6,R30
000508 83ff      	STD  Y+6+1,R31
000509 01df      	MOVW R26,R30
00050a 85e8      	LDD  R30,Y+8
00050b 85f9      	LDD  R31,Y+8+1
00050c 17ae      	CP   R26,R30
00050d 07bf      	CPC  R27,R31
00050e f420      	BRSH _0x10F
00050f 81ee      	LDD  R30,Y+6
000510 81ff      	LDD  R31,Y+6+1
000511 87e8      	STD  Y+8,R30
000512 87f9      	STD  Y+8+1,R31
                 _0x10F:
000513 935a      	ST   -Y,R21
000514 934a      	ST   -Y,R20
000515 85ec      	LDD  R30,Y+12
000516 85fd      	LDD  R31,Y+12+1
000517 93fa      	ST   -Y,R31
000518 93ea      	ST   -Y,R30
000519 85ec      	LDD  R30,Y+12
00051a 85fd      	LDD  R31,Y+12+1
00051b 93fa      	ST   -Y,R31
00051c 93ea      	ST   -Y,R30
00051d 940e 0556 	CALL _memmove
00051f 01fa      	MOVW R30,R20
000520 c007      	RJMP _0x11A
                 _0x10E:
000521 01f8      	MOVW R30,R16
000522 01d9
000523 9612
000524 93ed
000525 93fc      	__PUTW1RNS 18,2
                 _0x10D:
                 _0x10C:
                 _0x10B:
000526 e0e0      	LDI  R30,LOW(0)
000527 e0f0      	LDI  R31,HIGH(0)
                 _0x11A:
000528 940e 05fa 	CALL __LOADLOCR6
00052a 962c      	ADIW R28,12
00052b 9508      	RET
                 _malloc:
00052c 931a      	ST   -Y,R17
00052d 930a      	ST   -Y,R16
00052e e000
00052f e010      	__GETWRN 16,17,0
000530 81ea      	LDD  R30,Y+2
000531 81fb      	LDD  R31,Y+2+1
000532 9730      	SBIW R30,0
000533 f089      	BREQ _0x110
000534 93fa      	ST   -Y,R31
000535 93ea      	ST   -Y,R30
000536 940e 047c 	CALL _allocate_block_G2
000538 018f      	MOVW R16,R30
000539 9730      	SBIW R30,0
00053a f051      	BREQ _0x111
00053b 931a      	ST   -Y,R17
00053c 930a      	ST   -Y,R16
00053d e0e0      	LDI  R30,LOW(0)
00053e 93ea      	ST   -Y,R30
00053f 81ed      	LDD  R30,Y+5
000540 81fe      	LDD  R31,Y+5+1
000541 93fa      	ST   -Y,R31
000542 93ea      	ST   -Y,R30
000543 940e 0573 	CALL _memset
                 _0x111:
                 _0x110:
000545 01f8      	MOVW R30,R16
000546 8119      	LDD  R17,Y+1
000547 8108      	LDD  R16,Y+0
000548 9624      	ADIW R28,4
000549 9508      	RET
                 _free:
00054a 81e8      	LD   R30,Y
00054b 81f9      	LDD  R31,Y+1
00054c 93fa      	ST   -Y,R31
00054d 93ea      	ST   -Y,R30
00054e e0e0      	LDI  R30,LOW(0)
00054f e0f0      	LDI  R31,HIGH(0)
000550 93fa      	ST   -Y,R31
000551 93ea      	ST   -Y,R30
000552 940e 04df 	CALL _realloc
000554 9622      	ADIW R28,2
000555 9508      	RET
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 _memmove:
000556 8199          ldd  r25,y+1
000557 8188          ld   r24,y
000558 9600          adiw r24,0
000559 f0a9          breq memmove3
00055a 81bd          ldd  r27,y+5
00055b 81ac          ldd  r26,y+4
00055c 81fb          ldd  r31,y+3
00055d 81ea          ldd  r30,y+2
00055e 17ea          cp   r30,r26
00055f 07fb          cpc  r31,r27
000560 f071          breq memmove3
000561 f02c          brlt memmove1
                 memmove0:
000562 9161          ld   r22,z+
000563 936d          st   x+,r22
000564 9701          sbiw r24,1
000565 f7e1          brne memmove0
000566 c008          rjmp memmove3
                 memmove1:
000567 0fa8          add  r26,r24
000568 1fb9          adc  r27,r25
000569 0fe8          add  r30,r24
00056a 1ff9          adc  r31,r25
                 memmove2:
00056b 9162          ld   r22,-z
00056c 936e          st   -x,r22
00056d 9701          sbiw r24,1
00056e f7e1          brne memmove2
                 memmove3:
00056f 81fd          ldd  r31,y+5
000570 81ec          ldd  r30,y+4
000571 9626      	ADIW R28,6
000572 9508      	RET
                 _memset:
000573 81b9          ldd  r27,y+1
000574 81a8          ld   r26,y
000575 9610          adiw r26,0
000576 f031          breq memset1
000577 81fc          ldd  r31,y+4
000578 81eb          ldd  r30,y+3
000579 816a          ldd  r22,y+2
                 memset0:
00057a 9361          st   z+,r22
00057b 9711          sbiw r26,1
00057c f7e9          brne memset0
                 memset1:
00057d 81eb          ldd  r30,y+3
00057e 81fc          ldd  r31,y+4
00057f 9625      	ADIW R28,5
000580 9508      	RET
                 
                 	.DSEG
                 _p_S65:
00052d           	.BYTE 0x2
                 
                 	.CSEG
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000581 93ea      	ST   -Y,R30
000582 940e 00df 	CALL _COM_read_register
000584 2f1e      	MOV  R17,R30
000585 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
000586 940e 00cd 	CALL _COM_write_register
000588 e087
000589 958a
00058a f7f1      	__DELAY_USB 7
00058b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
00058c e0e2      	LDI  R30,LOW(2)
00058d 93ea      	ST   -Y,R30
00058e e0e6      	LDI  R30,LOW(6)
00058f 93ea      	ST   -Y,R30
000590 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000591 e0e2      	LDI  R30,LOW(2)
000592 93ea      	ST   -Y,R30
000593 e0e9      	LDI  R30,LOW(9)
000594 93ea      	ST   -Y,R30
000595 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000596 940e 00cd 	CALL _COM_write_register
000598 ef80
000599 958a
00059a f7f1      	__DELAY_USB 240
00059b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
00059c 91a0 0508
00059e 91b0 0509 	__GETW2MN _usart_msg,1
0005a0 91e0 050a 	__GETB1MN _usart_msg,3
0005a2 5fef      	SUBI R30,-LOW(1)
0005a3 93e0 050a 	__PUTB1MN _usart_msg,3
0005a5 50e1      	SUBI R30,LOW(1)
0005a6 e0f0      	LDI  R31,0
0005a7 0fae      	ADD  R26,R30
0005a8 1fbf      	ADC  R27,R31
0005a9 91ec      	LD   R30,X
0005aa 93e0 00c6 	STS  198,R30
0005ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0005ad 93aa      	ST   -Y,R26
0005ae 93ba      	ST   -Y,R27
0005af 93ea      	ST   -Y,R30
0005b0 93fa      	ST   -Y,R31
0005b1 b7ef      	IN   R30,SREG
0005b2 93ea      	ST   -Y,R30
0005b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0005b4 50e1      	SUBI R30,LOW(1)
0005b5 e0f0      	LDI  R31,0
0005b6 5fe5      	SUBI R30,LOW(-_usart_rx_buffer)
0005b7 4ffa      	SBCI R31,HIGH(-_usart_rx_buffer)
0005b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0005b9 93e0 0518 	STS  _ms_counter,R30
0005bb 93f0 0519 	STS  _ms_counter+1,R31
0005bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0005be e0e8      	LDI  R30,LOW(8)
0005bf 93ea      	ST   -Y,R30
0005c0 940c 01f3 	JMP  _HAL_set_state
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0005c2 e0f0      	LDI  R31,0
0005c3 01de      	MOVW R26,R28
0005c4 9616      	ADIW R26,6
0005c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0005c6 e0e6      	LDI  R30,LOW(6)
0005c7 93ea      	ST   -Y,R30
0005c8 940c 01f3 	JMP  _HAL_set_state
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0005ca 940e 02cc 	CALL _m644_add_message
0005cc 940c 02e0 	JMP  _m644_start_tx
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0005ce 93fa      	ST   -Y,R31
0005cf 93ea      	ST   -Y,R30
0005d0 e0e4      	LDI  R30,LOW(4)
0005d1 93ea      	ST   -Y,R30
0005d2 cff7      	RJMP SUBOPT_0xC
                 
                 __LSLB12:
0005d3 23ee      	TST  R30
0005d4 2e0e      	MOV  R0,R30
0005d5 2fea      	MOV  R30,R26
0005d6 f019      	BREQ __LSLB12R
                 __LSLB12L:
0005d7 0fee      	LSL  R30
0005d8 940a      	DEC  R0
0005d9 f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0005da 9508      	RET
                 
                 __ASRB12:
0005db 23ee      	TST  R30
0005dc 2e0e      	MOV  R0,R30
0005dd 2fea      	MOV  R30,R26
0005de f019      	BREQ __ASRB12R
                 __ASRB12L:
0005df 95e5      	ASR  R30
0005e0 940a      	DEC  R0
0005e1 f7e9      	BRNE __ASRB12L
                 __ASRB12R:
0005e2 9508      	RET
                 
                 __LSRB12:
0005e3 23ee      	TST  R30
0005e4 2e0e      	MOV  R0,R30
0005e5 2fea      	MOV  R30,R26
0005e6 f019      	BREQ __LSRB12R
                 __LSRB12L:
0005e7 95e6      	LSR  R30
0005e8 940a      	DEC  R0
0005e9 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
0005ea 9508      	RET
                 
                 __GETW1P:
0005eb 91ed      	LD   R30,X+
0005ec 91fc      	LD   R31,X
0005ed 9711      	SBIW R26,1
0005ee 9508      	RET
                 
                 __CPW02:
0005ef 2400      	CLR  R0
0005f0 160a      	CP   R0,R26
0005f1 060b      	CPC  R0,R27
0005f2 9508      	RET
                 
                 __SAVELOCR6:
0005f3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005f4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005f5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005f6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005f7 931a      	ST   -Y,R17
0005f8 930a      	ST   -Y,R16
0005f9 9508      	RET
                 
                 __LOADLOCR6:
0005fa 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005fb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005fc 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005fd 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005fe 8119      	LDD  R17,Y+1
0005ff 8108      	LD   R16,Y
000600 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega644 register use summary:
r0 :  23 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   7 r7 :   6 
r8 :   7 r9 :   0 r10:   1 r11:  25 r12:   4 r13:  10 r14:   0 r15:   0 
r16:  33 r17:  48 r18:  14 r19:   4 r20:  22 r21:  25 r22:   8 r23:   0 
r24:  29 r25:   8 r26: 110 r27:  30 r28:  21 r29:   2 r30: 504 r31:  89 
x  :  25 y  : 221 z  :  12 
Registers used: 29 out of 35 (82.9%)

ATmega644 instruction use summary:
adc   :   9 add   :   9 adiw  :  27 and   :   0 andi  :   9 asr   :   1 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :  32 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   7 brlt  :   1 brmi  :   1 brne  :  62 brpl  :   0 
brsh  :   9 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  : 101 cbi   :   8 cbr   :   1 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :  15 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :  38 cpc   :   6 cpi   :  36 cpse  :   0 
dec   :  10 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  17 inc   :   0 jmp   :  33 ld    :  33 ldd   :  71 
ldi   : 178 lds   :  38 lpm   :   7 lsl   :   6 lsr   :   1 mov   :  32 
movw  :  43 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   6 ori   :   2 out   :  19 pop   :   2 push  :   2 rcall :  15 
ret   :  47 reti  :   3 rjmp  :  61 rol   :   1 ror   :   0 sbc   :   3 
sbci  :   3 sbi   :  11 sbic  :   0 sbis  :   2 sbiw  :  24 sbr   :   0 
sbrc  :   1 sbrs  :   8 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   1 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    : 127 std   :  20 sts   :  47 sub   :   3 subi  :  23 
swap  :   1 tst   :   4 wdr   :   1 
Instructions used: 58 out of 111 (52.3%)

ATmega644 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c02   2998     76   3074   65536   4.7%
[.dseg] 0x000100 0x00052f      0     47     47    4096   1.1%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 9 warnings
