
AVRASM ver. 2.1.9  usart_tester.asm Tue Feb 26 19:45:05 2008

usart_tester.asm(991): Including file 'usart_tester.vec'
usart_tester.asm(992): Including file 'usart_tester.inc'
usart_tester.inc(2): warning: Register r4 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(3): warning: Register r6 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(4): warning: Register r9 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(5): warning: Register r8 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(6): warning: Register r11 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(7): warning: Register r12 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(8): warning: Register r10 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
usart_tester.inc(9): warning: Register r13 already defined by the .DEF directive
usart_tester.asm(992): 'usart_tester.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.25.8 Standard
                 ;(C) Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega644
                 ;Program type           : Application
                 ;Clock frequency        : 4.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 256 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega644
                 	#pragma AVRPART MEMORY PROG_FLASH 65536
                 	#pragma AVRPART MEMORY EEPROM 2048
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR0=0x2D
                 	.EQU SPDR0=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "usart_tester.vec"
                 
                 ;INTERRUPT VECTORS
000000 940c 0042 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 00c8 	JMP  _handle_IRQ
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0193 	JMP  _handle_tim1
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0155 	JMP  _handle_rxc
00002a 940c 0000 	JMP  0x00
00002c 940c 017b 	JMP  _handle_txc
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
                 
                 	.INCLUDE "usart_tester.inc"
                 
                 	.DEF _HAL_tx_frame=R4
                 	.DEF _HAL_rx_frame=R6
                 	.DEF _HAL_tx_frame_length=R9
                 	.DEF _HAL_rx_frame_length=R8
                 	.DEF _HAL_radio_state=R11
                 	.DEF _COM_mcu_freq=R12
                 	.DEF _m644_baud_divisor=R10
                 	.DEF _busy_flag=R13
                 _231:
000038 0000      	.DW  0x00
                 
                 ;GPIOR0 INITIALIZATION
                 	.EQU  __GPIOR0_INIT=0x00
                 
                 ;HEAP START MARKER INITIALIZATION
                 __HEAP_START_MARKER:
000039 0000
00003a 0000      	.DW  0,0
                 
                 __GLOBAL_INI_TBL:
00003b 0004      	.DW  0x04
00003c 1000      	.DW  0x1000
00003d 0072      	.DW  __HEAP_START_MARKER*2
                 
00003e 0002      	.DW  0x02
00003f 051a      	.DW  _p_S62
000040 0070      	.DW  _231*2
                 
000041 0000      	.DW  0
                 _0xF0:
                 
                 __RESET:
000042 94f8      	CLI
000043 27ee      	CLR  R30
000044 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000045 e0f1      	LDI  R31,1
000046 bff5      	OUT  MCUCR,R31
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000048 e1f8      	LDI  R31,0x18
000049 95a8      	WDR
00004a b7a4      	IN   R26,MCUSR
00004b 7fa7      	CBR  R26,8
00004c bfa4      	OUT  MCUSR,R26
00004d 93f0 0060 	STS  WDTCSR,R31
00004f 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000051 e08d      	LDI  R24,13
000052 e0a2      	LDI  R26,2
000053 27bb      	CLR  R27
                 __CLEAR_REG:
000054 93ed      	ST   X+,R30
000055 958a      	DEC  R24
000056 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000057 e080      	LDI  R24,LOW(0xF00)
000058 e09f      	LDI  R25,HIGH(0xF00)
000059 e0a0      	LDI  R26,LOW(0x100)
00005a e0b1      	LDI  R27,HIGH(0x100)
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000070 e0e0      	LDI  R30,__GPIOR0_INIT
000071 bbee      	OUT  GPIOR0,R30
                 
                 ;STACK POINTER INITIALIZATION
000072 efef      	LDI  R30,LOW(0xFFF)
000073 bfed      	OUT  SPL,R30
000074 e0ef      	LDI  R30,HIGH(0xFFF)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e0c0      	LDI  R28,LOW(0x500)
000077 e0d5      	LDI  R29,HIGH(0x500)
                 
000078 940c 01b0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 ;       1 #include <mega644.h>
                 ;       2 	#ifndef __SLEEP_DEFINED__
                 	#ifndef __SLEEP_DEFINED__
                 ;       3 	#define __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 ;       4 	.EQU __se_bit=0x01
                 	.EQU __se_bit=0x01
                 ;       5 	.EQU __sm_mask=0x0E
                 	.EQU __sm_mask=0x0E
                 ;       6 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powerdown=0x04
                 ;       7 	.EQU __sm_powersave=0x06
                 	.EQU __sm_powersave=0x06
                 ;       8 	.EQU __sm_standby=0x0C
                 	.EQU __sm_standby=0x0C
                 ;       9 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_ext_standby=0x0E
                 ;      10 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_adc_noise_red=0x02
                 ;      11 	.SET power_ctrl_reg=smcr
                 	.SET power_ctrl_reg=smcr
                 ;      12 	#endif
                 	#endif
                 ;      13 #include "cumote_hal.h"
                 _HAL_LQI:
000500           	.BYTE 0x1
                 _HAL_radio_channel:
000501           	.BYTE 0x1
                 _HAL_transmit_power:
000502           	.BYTE 0x1
                 _HAL_CRC_enabled:
000503           	.BYTE 0x1
                 
                 	.CSEG
                 ;	t -> Y+0
                 ;      14         MOV R16,R12
                 ;      15         ld R26,y  ; load t into r26. y register is stack pointer. t is lowest on stack.
                 ;      16         clr R27   ; promote t to unsigned int
                 ;      17 
                 ;      18         cpi R16,0 ; see if r12 is 0
                 ;      19         breq startdelay   ; branch to starting delay...       overhead is now a bit more than 5 cycles.
                 ;      20    preploop:         ;~5 more cycles
                 ;      21         lsl R26  ; multiply t by 2
                 ;      22         rol R27
                 ;      23         dec R16
                 ;      24         cpi R16,0
                 ;      25         brne preploop
                 ;      26    startdelay:                      ;overhead: t=0...5. t=1...10. t=2...15. t=3...20. t=4...25.
                 ;      27         subi R26,3     ; lo byte
                 ;      28         sbci R27,0     ; hi byte, with carry
                 ;      29         brmi enddelay      ; if result is negative, end loop, done with delay.
                 ;      30    enddelay:
                 
                 	.DSEG
                 _COM_spi_freq:
000504           	.BYTE 0x1
                 _COM_IRQ_pending:
000505           	.BYTE 0x1
                 _COM_IRQ_status:
000506           	.BYTE 0x1
                 
                 	.CSEG
                 _COM_init:
00007a 9a25      	SBI  0x4,5
00007b 9826      	CBI  0x4,6
00007c 9a27      	SBI  0x4,7
00007d 9822      	CBI  0x4,2
00007e 9a23      	SBI  0x4,3
00007f 9a24      	SBI  0x4,4
000080 982b      	CBI  0x5,3
000081 9a2c      	SBI  0x5,4
000082 24cc      	CLR  R12
000083 e0e0      	LDI  R30,LOW(0)
000084 93e0 0506 	STS  _COM_IRQ_status,R30
000086 d001      	RCALL _COM_reset_SPI_clock
000087 9508      	RET
                 _COM_reset_SPI_clock:
000088 e5e0      	LDI  R30,LOW(80)
000089 bdec      	OUT  0x2C,R30
00008a e0e1      	LDI  R30,LOW(1)
00008b bded      	OUT  0x2D,R30
00008c 93e0 0504 	STS  _COM_spi_freq,R30
00008e 9508      	RET
                 _COM_set_MCU_clock:
00008f 931a      	ST   -Y,R17
                 ;	clk -> Y+1
                 ;	junk -> R17
000090 81a9      	LDD  R26,Y+1
000091 30a5      	CPI  R26,LOW(0x5)
000092 f010      	BRLO _0x13
000093 e0e4      	LDI  R30,LOW(4)
000094 83e9      	STD  Y+1,R30
                 _0x13:
000095 e0e3      	LDI  R30,LOW(3)
000096 940e 0204 	CALL SUBOPT_0x0
000098 7f10      	ANDI R17,LOW(240)
000099 81e9      	LDD  R30,Y+1
00009a 70e7      	ANDI R30,LOW(0x7)
00009b 2b1e      	OR   R17,R30
00009c e0e3      	LDI  R30,LOW(3)
00009d 93ea      	ST   -Y,R30
00009e 931a      	ST   -Y,R17
00009f d002      	RCALL _COM_write_register
0000a0 8118      	LDD  R17,Y+0
0000a1 c024      	RJMP _0xEE
                 ;	speed -> Y+0
                 _COM_write_register:
0000a2 931a      	ST   -Y,R17
                 ;	address -> Y+2
                 ;	data -> Y+1
                 ;	junk -> R17
0000a3 982c      	CBI  0x5,4
0000a4 81ea      	LDD  R30,Y+2
0000a5 73ef      	ANDI R30,LOW(0x3F)
0000a6 54e0      	SUBI R30,-LOW(192)
0000a7 bdee      	OUT  0x2E,R30
                 _0x22:
0000a8 b5ed      	IN   R30,0x2D
0000a9 ffe7      	SBRS R30,7
0000aa cffd      	RJMP _0x22
0000ab b51e      	IN   R17,46
0000ac 81e9      	LDD  R30,Y+1
0000ad bdee      	OUT  0x2E,R30
                 _0x25:
0000ae b5ed      	IN   R30,0x2D
0000af ffe7      	SBRS R30,7
0000b0 cffd      	RJMP _0x25
0000b1 9a2c      	SBI  0x5,4
0000b2 8118      	LDD  R17,Y+0
0000b3 c08e      	RJMP _0xEC
                 _COM_read_register:
0000b4 931a      	ST   -Y,R17
                 ;	address -> Y+1
                 ;	junk -> R17
0000b5 982c      	CBI  0x5,4
0000b6 81e9      	LDD  R30,Y+1
0000b7 73ef      	ANDI R30,LOW(0x3F)
0000b8 58e0      	SUBI R30,-LOW(128)
0000b9 bdee      	OUT  0x2E,R30
                 _0x2C:
0000ba b5ed      	IN   R30,0x2D
0000bb ffe7      	SBRS R30,7
0000bc cffd      	RJMP _0x2C
0000bd b51e      	IN   R17,46
0000be e0e0      	LDI  R30,LOW(0)
0000bf bdee      	OUT  0x2E,R30
                 _0x2F:
0000c0 b5ed      	IN   R30,0x2D
0000c1 ffe7      	SBRS R30,7
0000c2 cffd      	RJMP _0x2F
0000c3 9a2c      	SBI  0x5,4
0000c4 b5ee      	IN   R30,0x2E
0000c5 8118      	LDD  R17,Y+0
                 _0xEE:
0000c6 9622      	ADIW R28,2
0000c7 9508      	RET
                 ;	i -> R17
                 ;	Twait -> R16,R17
                 ;	Tradio -> R18,R19
                 ;	Tmcu -> R20,R21
                 ;	Tspi -> Y+8
                 ;	L -> Y+7
                 ;	i -> Y+6
                 _handle_IRQ:
0000c8 93ea      	ST   -Y,R30
0000c9 e0e1      	LDI  R30,LOW(1)
0000ca 93e0 0505 	STS  _COM_IRQ_pending,R30
0000cc 91e9      	LD   R30,Y+
0000cd 9518      	RETI
                 _HAL_initialization:
0000ce 2444      	CLR  R4
0000cf 2455      	CLR  R5
0000d0 2466      	CLR  R6
0000d1 2477      	CLR  R7
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 93e0 0503 	STS  _HAL_CRC_enabled,R30
0000d5 ef8e
0000d6 e091
0000d7 9701
0000d8 f7f1      	__DELAY_USW 510
0000d9 d007      	RCALL _HAL_statemachine_reset
0000da d022      	RCALL _HAL_get_radio_channel
0000db 93e0 0501 	STS  _HAL_radio_channel,R30
0000dd d028      	RCALL _HAL_get_transmit_power
0000de 93e0 0502 	STS  _HAL_transmit_power,R30
0000e0 9508      	RET
                 _HAL_statemachine_reset:
0000e1 d02e      	RCALL _HAL_get_state
0000e2 e088
0000e3 958a
0000e4 f7f1      	__DELAY_USB 8
0000e5 20bb      	TST  R11
0000e6 f459      	BRNE _0x61
0000e7 e0e2      	LDI  R30,LOW(2)
0000e8 93ea      	ST   -Y,R30
0000e9 e0e8      	LDI  R30,LOW(8)
0000ea 93ea      	ST   -Y,R30
0000eb 940e 00a2 	CALL _COM_write_register
0000ed ef8e
0000ee e091
0000ef 9701
0000f0 f7f1      	__DELAY_USW 510
0000f1 c009      	RJMP _0x62
                 _0x61:
0000f2 e0e2      	LDI  R30,LOW(2)
0000f3 93ea      	ST   -Y,R30
0000f4 e0e3      	LDI  R30,LOW(3)
0000f5 93ea      	ST   -Y,R30
0000f6 940e 00a2 	CALL _COM_write_register
0000f8 e088
0000f9 958a
0000fa f7f1      	__DELAY_USB 8
                 _0x62:
0000fb d014      	RCALL _HAL_get_state
0000fc 9508      	RET
                 ;	length -> Y+0
                 ;	length -> Y+0
                 _HAL_get_radio_channel:
0000fd 931a      	ST   -Y,R17
                 ;	tmp -> R17
0000fe e0e8      	LDI  R30,LOW(8)
0000ff 940e 0204 	CALL SUBOPT_0x0
000101 2fe1      	MOV  R30,R17
000102 71ef      	ANDI R30,LOW(0x1F)
000103 93e0 0501 	STS  _HAL_radio_channel,R30
000105 c008      	RJMP _0xED
                 ;	channel -> Y+1
                 ;	tmp -> R17
                 _HAL_get_transmit_power:
000106 931a      	ST   -Y,R17
                 ;	tmp -> R17
000107 e0e5      	LDI  R30,LOW(5)
000108 940e 0204 	CALL SUBOPT_0x0
00010a 2fe1      	MOV  R30,R17
00010b 70ef      	ANDI R30,LOW(0xF)
00010c 93e0 0502 	STS  _HAL_transmit_power,R30
                 _0xED:
00010e 9119      	LD   R17,Y+
00010f 9508      	RET
                 ;	tx_pwr -> Y+1
                 ;	tmp -> R17
                 _HAL_get_state:
000110 e0e1      	LDI  R30,LOW(1)
000111 93ea      	ST   -Y,R30
000112 940e 00b4 	CALL _COM_read_register
000114 71ef      	ANDI R30,LOW(0x1F)
000115 2ebe      	MOV  R11,R30
000116 9508      	RET
                 ;	state -> Y+1
                 ;	i -> R17
                 ;	mode -> Y+1
                 ;	tmp -> R17
                 ;	tmp -> R17
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	user_csma -> Y+1
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	junk -> R17
                 ;	hi -> Y+1
                 ;	lo -> Y+0
                 ;	hi -> Y+1
                 ;	lo -> Y+0
                 ;	retries -> Y+0
                 ;      31 #include "mega644_usart.h"
                 
                 	.DSEG
                 _usart_msg:
000507           	.BYTE 0x4
                 _usart_rx_buffer:
00050b           	.BYTE 0xD
                 
                 	.CSEG
                 _m644_init_usart:
000117 e0e1      	LDI  R30,LOW(1)
000118 2eae      	MOV  R10,R30
000119 24dd      	CLR  R13
00011a e4e2      	LDI  R30,LOW(66)
00011b 93e0 00c0 	STS  192,R30
00011d ece0      	LDI  R30,LOW(192)
00011e 93e0 00c1 	STS  193,R30
000120 e0e6      	LDI  R30,LOW(6)
000121 93e0 00c2 	STS  194,R30
000123 e0e0      	LDI  R30,LOW(0)
000124 93e0 00c5 	STS  197,R30
000126 93e0 00c4 	STS  196,R30
000128 93e0 0515 	__PUTB1MN _usart_rx_buffer,10
00012a 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
00012c 93e0 0517 	__PUTB1MN _usart_rx_buffer,12
00012e d020      	RCALL _m644_enable_trx
00012f 9508      	RET
                 _m644_add_message:
                 ;	*new_msg -> Y+1
                 ;	len -> Y+0
000130 e0e1      	LDI  R30,LOW(1)
000131 15ed      	CP   R30,R13
000132 f411      	BRNE _0xB6
000133 e0e0      	LDI  R30,LOW(0)
000134 c00d      	RJMP _0xEC
                 _0xB6:
000135 81e8      	LD   R30,Y
000136 93e0 0507 	STS  _usart_msg,R30
000138 81e9      	LDD  R30,Y+1
000139 81fa      	LDD  R31,Y+1+1
00013a 93e0 0508
00013c 93f0 0509 	__PUTW1MN _usart_msg,1
00013e e0e0      	LDI  R30,LOW(0)
00013f 93e0 050a 	__PUTB1MN _usart_msg,3
000141 e0e1      	LDI  R30,LOW(1)
                 _0xEC:
000142 9623      	ADIW R28,3
000143 9508      	RET
                 _m644_start_tx:
000144 91a0 050a 	__GETB2MN _usart_msg,3
000146 91e0 0507 	LDS  R30,_usart_msg
000148 17ae      	CP   R26,R30
000149 f420      	BRSH _0xB7
00014a e0e1      	LDI  R30,LOW(1)
00014b 2ede      	MOV  R13,R30
00014c 940e 0209 	CALL SUBOPT_0x1
                 _0xB7:
00014e 9508      	RET
                 _m644_enable_trx:
00014f 91e0 00c1 	LDS  R30,193
000151 61e8      	ORI  R30,LOW(0x18)
000152 93e0 00c1 	STS  193,R30
000154 9508      	RET
                 _handle_rxc:
000155 940e 021a 	CALL SUBOPT_0x2
000157 931a      	ST   -Y,R17
                 ;	junk -> R17
000158 91a0 0517 	__GETB2MN _usart_rx_buffer,12
00015a 30aa      	CPI  R26,LOW(0xA)
00015b f4d8      	BRSH _0xB8
00015c 91e0 0516 	__GETB1MN _usart_rx_buffer,11
00015e 5fef      	SUBI R30,-LOW(1)
00015f 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
000161 50e1      	SUBI R30,LOW(1)
000162 e0f0      	LDI  R31,0
000163 5fe5      	SUBI R30,LOW(-_usart_rx_buffer)
000164 4ffa      	SBCI R31,HIGH(-_usart_rx_buffer)
000165 01df      	MOVW R26,R30
000166 91e0 00c6 	LDS  R30,198
000168 93ec      	ST   X,R30
000169 91e0 0517 	__GETB1MN _usart_rx_buffer,12
00016b 5fef      	SUBI R30,-LOW(1)
00016c 93e0 0517 	__PUTB1MN _usart_rx_buffer,12
00016e 50e1      	SUBI R30,LOW(1)
00016f 91a0 0516 	__GETB2MN _usart_rx_buffer,11
000171 30aa      	CPI  R26,LOW(0xA)
000172 f419      	BRNE _0xB9
000173 e0e0      	LDI  R30,LOW(0)
000174 93e0 0516 	__PUTB1MN _usart_rx_buffer,11
                 _0xB9:
000176 c002      	RJMP _0xBA
                 _0xB8:
000177 9110 00c6 	LDS  R17,198
                 _0xBA:
000179 9119      	LD   R17,Y+
00017a c011      	RJMP _0xEF
                 ;	to_return -> R17
                 _handle_txc:
00017b 940e 021a 	CALL SUBOPT_0x2
00017d 9b5f      	SBIS 0xB,7
00017e c002      	RJMP _0xBF
00017f 985f      	CBI  0xB,7
000180 c001      	RJMP _0xC0
                 _0xBF:
000181 9a5f      	SBI  0xB,7
                 _0xC0:
000182 91a0 050a 	__GETB2MN _usart_msg,3
000184 91e0 0507 	LDS  R30,_usart_msg
000186 17ea      	CP   R30,R26
000187 f411      	BRNE _0xC1
000188 24dd      	CLR  R13
000189 c002      	RJMP _0xC2
                 _0xC1:
00018a 940e 0209 	CALL SUBOPT_0x1
                 _0xC2:
                 _0xEF:
00018c 91e9      	LD   R30,Y+
00018d bfef      	OUT  SREG,R30
00018e 91f9      	LD   R31,Y+
00018f 91e9      	LD   R30,Y+
000190 91b9      	LD   R27,Y+
000191 91a9      	LD   R26,Y+
000192 9518      	RETI
                 ;      32 
                 ;      33 unsigned int ms_counter;
                 
                 	.DSEG
                 _ms_counter:
000518           	.BYTE 0x2
                 ;      34 
                 ;      35 interrupt [TIM1_COMPA] void handle_tim1(void) {
                 
                 	.CSEG
                 _handle_tim1:
000193 920a      	ST   -Y,R0
000194 93aa      	ST   -Y,R26
000195 93ba      	ST   -Y,R27
000196 93ea      	ST   -Y,R30
000197 93fa      	ST   -Y,R31
000198 b7ef      	IN   R30,SREG
000199 93ea      	ST   -Y,R30
                 ;      36     if (ms_counter > 0)
00019a 91a0 0518 	LDS  R26,_ms_counter
00019c 91b0 0519 	LDS  R27,_ms_counter+1
00019e 940e 0226 	CALL __CPW02
0001a0 f438      	BRSH _0xC3
                 ;      37         ms_counter--;
0001a1 91e0 0518 	LDS  R30,_ms_counter
0001a3 91f0 0519 	LDS  R31,_ms_counter+1
0001a5 9731      	SBIW R30,1
0001a6 940e 0221 	CALL SUBOPT_0x3
                 ;      38 }
                 _0xC3:
0001a8 91e9      	LD   R30,Y+
0001a9 bfef      	OUT  SREG,R30
0001aa 91f9      	LD   R31,Y+
0001ab 91e9      	LD   R30,Y+
0001ac 91b9      	LD   R27,Y+
0001ad 91a9      	LD   R26,Y+
0001ae 9009      	LD   R0,Y+
0001af 9518      	RETI
                 ;      39 
                 ;      40 
                 ;      41 void main(void)  {
                 _main:
                 ;      42     unsigned char my_msg[15];
                 ;      43     unsigned char *string_head;
                 ;      44     unsigned char i;
                 ;      45     COM_init();
0001b0 972f      	SBIW R28,15
                 ;	my_msg -> Y+0
                 ;	*string_head -> R16,R17
                 ;	i -> R19
0001b1 940e 007a 	CALL _COM_init
                 ;      46     COM_set_MCU_clock(3);
0001b3 e0e3      	LDI  R30,LOW(3)
0001b4 93ea      	ST   -Y,R30
0001b5 940e 008f 	CALL _COM_set_MCU_clock
                 ;      47     HAL_initialization();
0001b7 940e 00ce 	CALL _HAL_initialization
                 ;      48 
                 ;      49     DDRD.7 = 1;
0001b9 9a57      	SBI  0xA,7
                 ;      50     PORTD.7 = 0;
0001ba 985f      	CBI  0xB,7
                 ;      51 
                 ;      52     // timer initialization
                 ;      53     TCCR1A = 0b00000000;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 0080 	STS  128,R30
                 ;      54     OCR1AH = 1;
0001be e0e1      	LDI  R30,LOW(1)
0001bf 93e0 0089 	STS  137,R30
                 ;      55     OCR1AL = 0b11110100;
0001c1 efe4      	LDI  R30,LOW(244)
0001c2 93e0 0088 	STS  136,R30
                 ;      56     TCCR1B = 0b00001010; // clk/8... count to 500 for 1ms at 4MHz.
0001c4 e0ea      	LDI  R30,LOW(10)
0001c5 93e0 0081 	STS  129,R30
                 ;      57     TCCR1C = 0;
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 93e0 0082 	STS  130,R30
                 ;      58     TIMSK1 = 0b00000010;  // interrupt on compare A match
0001ca e0e2      	LDI  R30,LOW(2)
0001cb 93e0 006f 	STS  111,R30
                 ;      59 
                 ;      60     m644_init_usart();  // attempt high speed connection
0001cd 940e 0117 	CALL _m644_init_usart
                 ;      61 
                 ;      62 
                 ;      63     #asm
                 ;      64         sei
0001cf 9478              sei
                 ;      65     #endasm
                 ;      66 
                 ;      67     ms_counter = 1000;  // one second
0001d0 eee8      	LDI  R30,LOW(1000)
0001d1 e0f3      	LDI  R31,HIGH(1000)
0001d2 940e 0221 	CALL SUBOPT_0x3
                 ;      68     string_head = my_msg;
0001d4 01fe      	MOVW R30,R28
0001d5 018f      	MOVW R16,R30
                 ;      69     for (i=0; i<4; i++) {
0001d6 e030      	LDI  R19,LOW(0)
                 _0xC9:
0001d7 3034      	CPI  R19,4
0001d8 f448      	BRSH _0xCA
                 ;      70         my_msg[i] = 0xff;  // preamble
0001d9 2fe3      	MOV  R30,R19
0001da e0f0      	LDI  R31,0
0001db 01de      	MOVW R26,R28
0001dc 0fae      	ADD  R26,R30
0001dd 1fbf      	ADC  R27,R31
0001de efef      	LDI  R30,LOW(255)
0001df 93ec      	ST   X,R30
                 ;      71     }
0001e0 5f3f      	SUBI R19,-1
0001e1 cff5      	RJMP _0xC9
                 _0xCA:
                 ;      72     my_msg[4] = 15;
0001e2 e0ef      	LDI  R30,LOW(15)
0001e3 83ec      	STD  Y+4,R30
                 ;      73     for (i=0; i<15; i++)  {
0001e4 e030      	LDI  R19,LOW(0)
                 _0xCC:
0001e5 303f      	CPI  R19,15
0001e6 f448      	BRSH _0xCD
                 ;      74         my_msg[i+5] = i;
0001e7 2fe3      	MOV  R30,R19
0001e8 5feb      	SUBI R30,-LOW(5)
0001e9 e0f0      	LDI  R31,0
0001ea 01de      	MOVW R26,R28
0001eb 0fea      	ADD  R30,R26
0001ec 1ffb      	ADC  R31,R27
0001ed 8330      	ST   Z,R19
                 ;      75     }
0001ee 5f3f      	SUBI R19,-1
0001ef cff5      	RJMP _0xCC
                 _0xCD:
                 ;      76 
                 ;      77     while(1)  {
                 _0xCE:
                 ;      78         if (ms_counter == 0)  {
0001f0 91e0 0518 	LDS  R30,_ms_counter
0001f2 91f0 0519 	LDS  R31,_ms_counter+1
0001f4 9730      	SBIW R30,0
0001f5 f461      	BRNE _0xD1
                 ;      79             ms_counter = 1000;  // reset counter
0001f6 eee8      	LDI  R30,LOW(1000)
0001f7 e0f3      	LDI  R31,HIGH(1000)
0001f8 940e 0221 	CALL SUBOPT_0x3
                 ;      80             m644_add_message(string_head,20);
0001fa 931a      	ST   -Y,R17
0001fb 930a      	ST   -Y,R16
0001fc e1e4      	LDI  R30,LOW(20)
0001fd 93ea      	ST   -Y,R30
0001fe 940e 0130 	CALL _m644_add_message
                 ;      81             m644_start_tx();
000200 940e 0144 	CALL _m644_start_tx
                 ;      82         }
                 ;      83     }
                 _0xD1:
000202 cfed      	RJMP _0xCE
                 ;      84 }
                 _0xD2:
000203 cfff      	RJMP _0xD2
                 
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 _p_S62:
00051a           	.BYTE 0x2
                 
                 	.CSEG
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000204 93ea      	ST   -Y,R30
000205 940e 00b4 	CALL _COM_read_register
000207 2f1e      	MOV  R17,R30
000208 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000209 91a0 0508
00020b 91b0 0509 	__GETW2MN _usart_msg,1
00020d 91e0 050a 	__GETB1MN _usart_msg,3
00020f 5fef      	SUBI R30,-LOW(1)
000210 93e0 050a 	__PUTB1MN _usart_msg,3
000212 50e1      	SUBI R30,LOW(1)
000213 e0f0      	LDI  R31,0
000214 0fae      	ADD  R26,R30
000215 1fbf      	ADC  R27,R31
000216 91ec      	LD   R30,X
000217 93e0 00c6 	STS  198,R30
000219 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
00021a 93aa      	ST   -Y,R26
00021b 93ba      	ST   -Y,R27
00021c 93ea      	ST   -Y,R30
00021d 93fa      	ST   -Y,R31
00021e b7ef      	IN   R30,SREG
00021f 93ea      	ST   -Y,R30
000220 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000221 93e0 0518 	STS  _ms_counter,R30
000223 93f0 0519 	STS  _ms_counter+1,R31
000225 9508      	RET
                 
                 __CPW02:
000226 2400      	CLR  R0
000227 160a      	CP   R0,R26
000228 060b      	CPC  R0,R27
000229 9508      	RET
                 
                 __SAVELOCR6:
00022a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00022b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00022c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00022d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00022e 931a      	ST   -Y,R17
00022f 930a      	ST   -Y,R16
000230 9508      	RET
                 
                 __LOADLOCR6:
000231 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000232 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000233 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000234 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000235 8119      	LDD  R17,Y+1
000236 8108      	LD   R16,Y
000237 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega644 register use summary:
r0 :   9 r1 :   1 r2 :   0 r3 :   0 r4 :   1 r5 :   1 r6 :   1 r7 :   1 
r8 :   0 r9 :   0 r10:   1 r11:   2 r12:   1 r13:   4 r14:   0 r15:   0 
r16:   4 r17:  23 r18:   2 r19:  11 r20:   2 r21:   2 r22:   2 r23:   0 
r24:  15 r25:   4 r26:  29 r27:  13 r28:   7 r29:   1 r30: 182 r31:  24 
x  :   6 y  :  69 z  :   8 
Registers used: 28 out of 35 (80.0%)

ATmega644 instruction use summary:
adc   :   3 add   :   3 adiw  :   2 and   :   0 andi  :   7 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   1 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 
brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :  21 cbi   :   7 cbr   :   1 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   4 cpc   :   1 cpi   :   5 cpse  :   0 
dec   :   3 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :  10 inc   :   0 jmp   :  29 ld    :  17 ldd   :  15 
ldi   :  68 lds   :  20 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   8 
movw  :   8 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   1 ori   :   1 out   :  15 pop   :   0 push  :   0 rcall :   8 
ret   :  18 reti  :   3 rjmp  :  19 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   1 sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :   8 sbr   :   0 
sbrc  :   0 sbrs  :   4 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  42 std   :   2 sts   :  36 sub   :   0 subi  :  12 
swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 45 out of 111 (40.5%)

ATmega644 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000470   1116     20   1136   65536   1.7%
[.dseg] 0x000100 0x00051c      0     28     28    4096   0.7%
[.eseg] 0x000000 0x000000      0      0      0    2048   0.0%

Assembly complete, 0 errors, 8 warnings
